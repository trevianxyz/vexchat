The VEX V5 Leaderboard is a fun and interactive tool that can be used to display and document student performance in the STEM Labs, keeping students engaged with each other. Using the VEX V5 Leaderboard with Your Classroom The VEX V5 STEM Lab are focused around Rethink challenges. Challenges promote collaboration and naturally motivate students to improve their robots, their strategy, and their code. The VEX V5 Leaderboard is designed to help facilitate these challenges by providing an interactive tool for educators to use to present and record challenge data. Display the leaderboard throughout your challenge to show team scores and ranking, making it easy for students to visualize overall team performance throughout the challenge. Customizing the Leaderboard for Your Challenge The steps below outline how to add information and customize the leaderboard for your classroom challenge. Access the VEX V5 Leaderboard To access the VEX V5 Leaderboard, go to https://education.vex.com/leaderboard/. Then select the V5 Leaderboard. Name Your Leaderboard The leaderboard name text is editable. Rename the leaderboard by selecting “Leaderboard Name” and edit the text. Select anywhere outside of the name text or select "Enter" once finished. Label Score Columns The score column text is editable. Rename the columns by selecting the title and edit the text. Select anywhere outside of the text or select "Enter" once finished. Select the "+” or “-” icon to add or delete score columns. Add Team Names Select a team in the Team Name column to enter a team name in the leaderboard. Add more teams by selecting the “Add Team” button. Delete teams by selecting the trashcan icon. Once you have added all participating teams and score columns, you are ready to start the classroom challenge. Running a Classroom Challenge with the VEX V5 Leaderboard The leaderboard makes it easy to run a classroom challenge. The accessible interface allows you to display the time for all students competing to see, as well as input scores and see team rankings update in real time as the challenge progresses. Keep Time for Challenges Select “Start” to start the timer on the leaderboard. Select “Stop” to end the challenge run and stop the timer. Select “Reset” to set the timer back to zero for the next run of the challenge. See Scores and Team Ranking in Real-time Add team scores by selecting a score in the score column, then add the score. Scores can be changed or overwritten at any time. Scores for multiple runs are automatically totaled for each team and appear in the "Total Score" column. As scores are added, the teams will automatically be ordered by rank from highest to lowest score. If two teams have the same score, they will share the same rank. Document and Celebrate Student Performance Select “Print Leaderboard” to print or save the the entire leaderboard as a PDF. The PDF will display the team names as well as the scores. Select the printer icon to print or save an individual team certificate as a PDF. The certificate will include the challenge name, team name, team rank, and the team's total score. Using the VEX V5 Leaderboard Introduction The purpose of this article is to offer helpful information for those unfamiliar and just getting started with the 2023-2024 VEX Robotics Competition (VRC) game Over Under. Topics in this article will cover the purpose of building Striker and the next steps to make it your own. Hero Bots are designed by VEX engineers each year to play the Competition. The Hero Bot design changes from year to year depending on the game, so the Hero Bot for the VRC game Over Under is Striker.Remember, the Hero Bot is designed as a starting point for you to test and improve upon, not an end product. The Hero Bot is designed so that new teams can learn valuable building skills and have a robot they can customize to compete with early in the season. Advanced teams can also use the Hero Bot to be able to quickly assemble a robot to investigate the game's dynamics. The 2023-2024 Hero Bot is in no way a final product however, a Triball scoring machine. To reiterate, the Hero Bot is a starting point. We here at VEX believe that everyone should have a fair chance at competing in this year’s Competition, thus the Hero Bot is born.Competing can seem intimidating, especially when there are teams who have been competing for many years with a lot of experience.Building Striker, one is able to understand more about the game and what is actually needed in a robot design, rather than just reading it on a piece of paper. Perusing the Over Under Game Manual, it is hard to exactly envision a robot that performs scoring activities while at the same time obeying rules as a newcomer.This is exactly why Striker has been made and offered to everyone, for the purpose of allowing everyone to start in the same place regardless of experience. Beginning Robot Design Think about it this way; there is almost an infinite combination of the parts and connection patterns provided in your VEX V5 Competition Starter Kits (link to poster). With that statement being true, mathematically, anything is possible. You just have to find that exact formula to answer all your problems. The question that arises with that is this, “Where do I start?” Starting Line Believe it or not, once you have built Striker and tested the game, you have already started! When beginning to freely-build, it is definitely worth your while to state why and for what purpose you are freely-building. The questions to these answers have most likely been found through your testing of Striker. It is often helpful to document your thinking and design constraints found in the game manual before you begin to build. You could make a chart with the goals you want your design to achieve. Some examples of goals you may want to achieve include: I want the design to score a Triball. I want the design to be Elevated at the end of the match. I want the design to traverse the Long Barrier. You could also make a chart with the constraints on your design. Some examples of constraints you may have to consider include: Only can use 88W of combined power of all motors (11W &amp; 5.5W). Only can use V5 System parts. Only can store one Triball at a time. It is important to lay these questions out not only for the sake of remembering them, but also to stay on track. With infinite combinations of connections, it can be hard to remember exactly why you started once you have started. Listing your goal and all the limiting factors can help to ensure you create what you originally wanted. Design, Create, and Iterate Knowing your goal and constraints sets the stage for designing your solution. Before building, it is important to have a plan. Build Instructions offer a very specific and detailed plan for a build. When free building, plans can be looser, but should involve some kind of sketch of what it is that you are trying to build. This means practice creating a mental model of your idea, transferring that to paper, then matching your drawing to actual pieces from the Kit. Once you have laid out what you want to achieve with your build and the factors directly in between you and that goal, it is then a balancing act. You must find the perfect balance between your constraints and your goals to create what exactly you set out to achieve. Do not be afraid to try new things! It is important as you experiment with these possible solutions and builds that you do not follow one specific path. With an almost infinite combination of parts in the Kit, there is definitely more than one approach to your problem! Test and iterate on your build to make sure it achieves your goal and still meets your constraints. The entire free building process is loads of fun as it places you in the driver’s seat! Lastly, while this is a competition, it is a friendly competition to say the least. Visit the VEX Forum and VEX Professional Development Plus (PD+), which has a lot of great resources from other team’s builds! Get inspiration, ask questions, or view solutions to questions you may have that have already been answered by either VEX employees, VEX mentors, or VEX enthusiasts! Getting Started with VRC '23-'24 Robot Design: Over Under Introduction The purpose of this article is to offer helpful information for those unfamiliar and just getting started with the 2023-2024 VEX IQ Robotics Competition (VIQRC) game Full Volume. Topics in this article will cover the purpose of building Byte and the next steps to make it your own. Hero Bots are designed by VEX engineers each year to play the Competition. The Hero Bot design changes from year to year depending on the game, so the Hero Bot for the VIQRC game Full Volume is Byte.Remember, the Hero Bot is designed as a starting point for you to test and improve upon, not an end product. The Hero Bot is designed so that new teams can learn valuable building skills and have a robot they can customize to compete with early in the season. Advanced teams can also use the Hero Bot to be able to quickly assemble a robot to investigate the game's dynamics. The 2023-2024 Hero Bot is in no way a final product however, a Block scoring machine. To reiterate, the Hero Bot is a starting point. We here at VEX believe that everyone should have a fair chance at competing in this year’s Competition, thus the Hero Bot is born.Competing can seem intimidating, especially when there are teams who have been competing for many years with a lot of experience.Building Byte, one is able to understand more about the game and what is actually needed in a robot design, rather than just reading it on a piece of paper. Perusing the Full Volume Game Manual, it is hard to exactly envision a robot that performs scoring activities while at the same time obeying rules as a newcomer.This is exactly why Byte has been made and offered to everyone, for the purpose of allowing everyone to start in the same place regardless of experience. Beginning Robot Design Think about it this way; there is almost an infinite combination of the parts and connection patterns provided in your VEX IQ Competition Kits (link to poster). With that statement being true, mathematically, anything is possible. You just have to find that exact formula to answer all your problems. The question that arises with that is this, “Where do I start?” Starting Line Believe it or not, once you have built Byte and tested the game, you have already started! When beginning to freely-build, it is definitely worth your while to state why and for what purpose you are freely-building. The questions to these answers have most likely been found through your testing of Byte. It is often helpful to document your thinking and design constraints found in the game manual before you begin to build. You could make a chart with the goals you want your design to achieve. Some examples of goals you may want to achieve include: I want the design to be able to intake Red Blocks and score them. I want the design to remove Blocks from the Supply Zone. I want the design to be very mobile. You could also make a chart with the constraints on your design. Some examples of constraints you may have to consider include: Only can use less than or equal to 6 IQ Smart Motors. Fit within an 11” wide x 20” long x 15” high (279mm x 483mm x 381mm) volume. Only be built from the VEX IQ product line. It is important to lay these questions out, not only for the sake of remembering them, but also to stay on track. With infinite combinations of connections, it can be hard to remember exactly why you started once you have started. Listing your goal and all the limiting factors can help to ensure you create what you originally wanted. Design, Create, and Iterate Knowing your goal and constraints sets the stage for designing your solution. Before building, it is important to have a plan. Build Instructions offer a very specific and detailed plan for a build. When free building, plans can be looser, but should involve some kind of sketch of what it is that you are trying to build. This means practice creating a mental model of your idea, transferring that to paper, then matching your drawing to actual pieces from the Kit. Once you have laid out what you want to achieve with your build and the factors directly in between you and that goal, it is then a balancing act. You must find the perfect balance between your constraints and your goals to create what exactly you set out to achieve. Do not be afraid to try new things! It is important as you experiment with these possible solutions and builds that you do not follow one specific path. With an almost infinite combination of parts in the Kit, there is definitely more than one approach to your problem! Test and iterate on your build to make sure it achieves your goal and still meets your constraints. The entire free building process is loads of fun as it places you in the driver’s seat! Lastly, while this is a competition, it is a friendly competition to say the least. Visit the VEX Forum and VEX Professional Development Plus (PD+), which has a lot of great resources from other team’s builds! Get inspiration, ask questions, or view solutions to questions you may have that have already been answered by either VEX employees, VEX mentors, or VEX enthusiasts! Getting Started with VIQRC '23-'24 Robot Design: Full Volume To get started driving with the 2023-24 VIQRC Hero Bot, Byte, you will need to use a provided code for use with the Controller. The default drive program on the IQ Brain is not compatible with Byte. Downloading the Controlling Byte Project To use this code on Byte, select your coding method of choice (Blocks, Python, or C++) and download the VEXcode IQ project from the link below. Controlling Byte Blocks Project Controlling Byte Python Project Controlling Byte C++ Project Note: These links will take you to a Google Drive file. Check that the name of the file in the top left corner matches the project you want to download (.iqblocks, .iqpython, .iqcpp), then select the Download button in the middle of the screen. Using the Controlling Byte Project Open VEXcode IQ on your device and connect your IQ Brain. For more information about accessing and connecting to the app-based version of VEXcode IQ, view these articles. For more information about accessing and connecting to the web-based version of VEXcode IQ, view these articles. Open the Coding Byte VEXcode IQ project. For more information on how to open a project from your device, select the articles that match your project. Opening VEXcode IQ Blocks Projects Opening VEXcode IQ Python Projects Opening VEXcode IQ C++ Projects Ensure your Controller is paired with the IQ Brain, then download and run the project. For more information on how to download and run a project, select the article that matches your project. Download and Run a VEXcode IQ Blocks Project Download and Run a VEXcode IQ Python Project Download and Run a VEXcode IQ C++ Project Driving Byte, the 2023-24 VIQRC Hero Bot The videos in the V5 Workcell Educator Certification Course are an essential resource for educators. There may be instances in which you would like to add them to an LMS, or other instances in which videos from the VEX server may be blocked by network firewalls or other restrictions. In order to provide access to the videos, we have supplied a shared Google Drive folder containing all of the videos from the V5 Workcell Educator Certification Course. This article explains the contents and structure of the files in this folder. Select this link to access the Google Drive folder. When you open the Google Drive folder, you will see a folder for each Unit of the Certification. Upon opening one of the Unit folders, you will see a folder for each of the two videos in the Unit: the video that demonstrates the activity for that accompanying STEM Lab, and a video for the facilitation of that activity. Inside each folder is the video for that Unit. All videos are named according to the same system. The sections of each video name are separated by underscores and are as listed in this example: VEX Platform (Workcell) Certification Unit (Unit 4) Name of Video (activity) Caption files for each video are also included in a separate folder. They are provided in .srt and .vtt formats. Accessing the V5 Workcell Educator Certification Videos for Export To print to the Console in web-based VEXcode V5, a connection to the user/console web-serial port is needed. This second port is needed because the first serial port links the V5 Brain to the device for project downloads from a browser. For more information about connecting to the first serial port in web-based VEXcode V5, view these articles. Note: to print to the Console, the V5 Brain must stay connected to the device via a USB cable while using the user/console web-serial port. Connecting to the User/Console Web-Serial Port Ensure the V5 Battery is charged and is connected to the V5 Brain. Turn on the Brain by pressing the Power button on the Brain. Connect the V5 Brain to your device using the Micro-USB cable. Ensure the V5 Brain is connected to the device via the first web-serial port. For more information on this connection process, view the article for your device: Connecting with Web-based VEXcode V5 - Chromebook Connecting with Web-based VEXcode V5 - Mac Connecting with Web-based VEXcode V5 - Windows The Brain icon should be green and the Brain name/Team number should appear. Select ‘Connect User / Console Serial Port.’ macOS/Chromebook Windows Select each image above to enlarge. A prompt will appear. It will appear slightly different between macOS/Chromebook and Windows, select ‘Continue.’ macOS/Chromebook Windows Select each image above to enlarge. macOS/Chromebook: select the V5 Brain with the HIGHEST ID number from the list of Brains available. The lowest ID number should already be paired. Windows: Select 'User Port.' The Communications Port should already be paired. macOS/Chromebook Windows Select each image above to enlarge. Select 'Connect' once your choice is highlighted. The User / Console Port will display as ‘Connected’ once the connection is successful. Disconnecting from the User/Console Web-Serial Port To disconnect your device from a V5 Brain, unplug the Micro-USB cable from your device or the V5 Brain. You can also disconnect a V5 Brain from web-based VEXcode V5 by turning the Brain off. Turn the Brain off by holding the Power button until the screen on the Brain goes black. Both of the methods above will disconnect the V5 Brain from both web-serial ports, showing the V5 Brain icon as white. Connecting to the User/Console Port in Web-Based VEXcode V5 Playing custom imported sounds is a unique function in the VEXcode V5 software. This article will walk you through where and how to import sounds into VEXcode V5, the setup required to ensure the sounds play properly, and an explanation of how the play VEXcode sound command works. VEXcode V5 Blocks VEXcode V5 Python VEXcode V5 C++ Select each image above to enlarge. Accessing the Play VEXcode Sound Command By default, the play VEXcode sound command does not appear in the toolbox on the left side of the screen. The following steps explain how to enable the command. Navigate to the File menu. Select ‘Tools’ and ‘Manage VEXcode Sounds.’ Note: this image shows blocks in the toolbox but the process is the same for C++ and Python projects. The Manage VEXcode Sounds menu will then appear. Select the check box to enable the play VEXcode sound command. Functionality of the Manage VEXcode Sounds Menu The Manage VEXcode Sounds menu is used to add sounds, edit sound names, and delete sounds. Add a sound Find an open row. Enter the sound name into the associated ‘Name’ box. When you input a new name, a blank row appears below the current row. Paste the associated sound file URL into the same row as the new name. When finished, select ‘Save Sounds.’ To edit the Manage VEXcode Sounds menu, select ‘Cancel.’ Save changes before hitting 'Cancel' to avoid losing any edits. Delete a sound Click the trash can icon to delete the sound linked to that row. Select ‘Save Sounds’ to save the changes or ‘Cancel’ to exit the menu. Note: at least one sound must always be listed in the table. The trash can icon will be grayed out when only one sound is left, to ensure one sound remains. Edit a sound You can edit a sound’s name or file URL by selecting it. Select ‘Save Sounds’ to save the changes or ‘Cancel’ to exit the menu. Connecting to the User/Console Port To play custom sounds in web-based VEXcode V5, a connection to the user/console web-serial port is needed. This second port is needed because the first serial port links the V5 Brain to the device for project downloads from a browser. For steps on how to connect the V5 Brain to the user/console port, view this article. To play custom sounds, the V5 Brain MUST stay connected to the device via a USB cable while using the user/console web-serial port. Using the Play VEXcode Sound Command Drag and attach or type the play VEXcode sound command to your project. For more information on how the block functions, view the Help. Help for VEXcode V5 blocks Help for VEXcode V5 Python Help for VEXcode V5 C++ VEXcode V5 Blocks VEXcode V5 Python VEXcode V5 C++ Select each image above to enlarge. Since the sounds play through the connected device, ensure the volume is up when playing sounds. Ensure the V5 Brain remains connected to the device via a USB cable while the project is downloaded and running. Note: custom sounds are stored into the VEXcode V5 project and will function as long as the specific project is loaded. If VEXcode V5 is closed or a new project is loaded, the sounds will not operate. However, upon reloading the original project file, the custom sounds will resume playing as anticipated. Playing Custom Imported Sounds in a VEXcode V5 Project The VEX Robotics Competition (VRC) Spin Up Playground in VEXcode VR and the accompanying VRC Activity Lab, can be used as part of your curriculum. This Activity Lab walks you through coding the robot to remove discs from dispensers and then score the discs. Overview of the VRC Spin Up Activity Lab VEXcode VR Activity Labs are sequenced Activities with some additional scaffolding and supports added to help students as they complete the Lab. The Activities are all designed to be student-facing so they can be used to extend student engagement with VEXcode VR Playgrounds, like VRC Virtual Skills - Spin Up. Activity Labs are designed to be flexible, so that students can engage with them as is, or activities can be extended or adapted to best meet your students needs and your teaching style Each Activity in the Lab includes an overview of what the robot should accomplish, a bulleted list to help break down the task into smaller components, and helpful hints if students need assistance while coding. There are 12 Activities that make up the VRC Spin Up Activity Lab. All of these Activities are listed below, including what concepts are covered, and the number of each activity. In Take It and Leave It (1) and Intake and Score High (2), students will code the intake discs from the field and score them in both the low and high goals. They will learn how to use the Intake motor in order to accomplish each of the tasks. In Roll It Red (3), students are challenged to drive to a roller on the field then use the Optical Sensor to spin the roller until it is red. They will learn how to use the Intake motor group with the rollers and how to use the Optical Sensor in a VEXcode project. In Where to Start (4), students will explore the different starting locations available and then put together all of their skills from the previous activities to intake and score two discs. In GPS Guidance (5) and Load It and Launch It (6), students will use sensors to collect discs and score them in the high goal. GPS Guidance has students use the GPS Sensor on Disco, the Hero Robot, and Load It and Launch It has students use the Bottom Distance Sensor to detect when a disc has been moved onto the field through the loaders. In Score a Pile of Discs (7) and Three Discs, One Launch (8) students will continue to use sensors to gather and score discs. In Score a Pile of Discs, students are introduced the Line Trackers placed throughout the intake to detect how many discs have been gathered by the robot. In the Three Discs, One Launch Activity, students will use the Bottom Distance sensor to drive the Hero Bot to the three Discs highlighted in green, pick up the three Discs, and score them in the blue High Goal. In Be Efficient! (9), students are challenged to take what they have learned about coding the different sensors on Disco, the Hero Robot, and apply them to score six discs as fast as possible. In Along the Shortest Path (10) and Aim the Target (11), students will apply the GPS Sensor, the Optical Sensor, the intake motor group, and the Bottom Distance sensor in order to gather discs, score them, and spin rollers. In Smart Plan (12), students will apply all of the skills they have learned in Activities 1 through 12 to get their highest possible score in VRC Spin Up! Teacher Resources The VRC Spin Up Activity Lab is a sequenced version of the Spin and Score, Take It and Leave It, Roll It Red, Load It and Score, and Location, Location, Location VEXcode VR Activities. Solutions for each activity can be found in the VEXcode VR Teacher Portal and is also linked here. To help facilitate your students completing this Activity Lab, you can also use the following VEX Library articles. View this article to learn more about facilitating coding conversations with students. Learn more about using pair programming to support student collaboration in this article. Read this article to learn about helping students to build resilience as they work through a project. To learn about the robot used in the VRC Spin Up Playground, the features of the Playground, and more, see these articles from the VEX Library. Teaching with the VRC Spin Up Activity Lab Using Match Loads in VRC Over Under for VEXcode VR Understanding the VRC Over Under Field Layout Identifying Location Details Using the GPS Sensor in the VRC Over Under Playground Using the VRC Over Under Playground Window Using the Pre-Match Checklist in VRC Virtual Skills Submitting a Score for VRC Over Under Virtual Skills in VEXcode VR Get Started with the VRC Over Under Playground Understanding Robot Features in VRC Over Under Get Started with VIQC Full Volume Playground The Field in the VRC Tipping Point Playground in VEXcode VR has the same dimensions and setup as the Field for an in-person Skills Match in the 2021-2022 VRC Tipping Point Competition game. This information can be useful when creating projects in VRC Tipping Point for VEXcode VR. Field Dimensions Each tile on the Field is 600mm by 600mm (~24 inches by 24 inches). The Field is six full tiles long. In total, the Field is 3.65m (~12 feet) long, as indicated by the blue line in this image. The Field is six full tiles wide. In total, the Field is 3.65m (~12 feet) wide, as indicated by the red line in this image. Measurement Notes Each full tile measurement begins and ends at the edge of the tile. The total Field measurements begin and end at the inner edge of the Field perimeter. Understanding the VRC Tipping Point Field Layout The Field in the VIQC Pitching In Playground in VEXcode VR has the same dimensions and setup as the Field for an in-person Skills Match in the 2021-2022 VIQC Pitching In Competition game. This information can be useful when creating projects in VIQC Pitching In for VEXcode VR. Field Dimensions Each full black square on the Field is 300mm by 300mm (~12 inches by 12 inches). Each half black square on the Field is 150mm by 300mm (~6 inches by 12 inches). Each corner on the Field is 150mm by 150mm (~6 inches by 6 inches). The Field is 5 full black squares, and two half-squares long. In total, the Field is 1.8m (~6 feet) long. The Field is 7 full black squares, and two half-squares wide. In total, the Field is 2.4m (~8 feet) wide. Measurement Notes Each full square measurement begins and ends at the center of the black line on the Tile. Each partial square measurement begins at the center of the black line and ends at the inner edge of the wall. The total Field measurements begin and end at the inner edge of the walls. Understanding the VIQC Pitching In Field Layout The Field in the VIQC Slapshot Playground in VEXcode VR has the same dimensions and setup as the Field for an in-person Skills Match in the 2022-2023 VIQC Slapshot Competition game. This information can be useful when creating projects in VIQC Slapshot for VEXcode VR. Field Dimensions Each full black square on the Field is 300mm by 300mm (~12 inches by 12 inches). Each half black square on the Field is 150mm by 300mm (~6 inches by 12 inches). Each corner on the Field is 150mm by 150mm (~6 inches by 6 inches). The Field is 5 full black squares, and two half-squares long. In total, the Field is 1.8m (~6 feet) long. The Field is 7 full black squares, and two half-squares wide. In total, the Field is 2.4m (~8 feet) wide. Measurement Notes Each full square measurement begins and ends at the center of the black line on the Tile. Each partial square measurement begins at the center of the black line and ends at the inner edge of the wall. The total Field measurements begin and end at the inner edge of the walls. Understanding the VIQC Slapshot Field Layout The VEX IQ Competition (VIQC) Slapshot Playground in VEXcode VR and the accompanying VIQC Activity Lab, can be used as part of your curriculum. This Activity Lab walks you through coding the robot to remove discs from dispensers and then score the discs. Overview of the VIQC Slapshot Activity Lab VEXcode VR Activity Labs are sequenced Activities with some additional scaffolding and supports added to help students as they complete the Lab. The Activities are all designed to be student-facing so they can be used to extend student engagement with VEXcode VR Playgrounds, like VIQC Virtual Skills - Slapshot. Activity Labs are designed to be flexible, so that students can engage with them as is, or activities can be extended or adapted to best meet your students needs and your teaching style. Each Activity in the Lab includes an overview of what the robot should accomplish, a bulleted list to help break down the task into smaller components, and helpful hints if students need assistance while coding. There are 10 Activities that make up the VIQC Slapshot Activity Lab. All of these Activities are listed below, including what concepts are covered, and the number of each activity. In Knock the Dispensers (1) and Spin the Dispensers (2), students will code the robot to remove discs from all three types of dispenser (blue, yellow, and purple). They will learn how to use the Intake and Arm motors in order to accomplish each of the tasks. In Take It and Score It (3), students will build on their code to pick up one of the discs released from a dispenser using the Intake, then score the disc. This furthers their understanding of the Intake motor to get a higher score in Slapshot. In Where to Start (4) and Time It! (5), students will explore the different starting locations available and then put together all of their skills from the previous activities to clear discs from three dispensers in the fastest time possible. In Explore Locations (6) and Follow the Shortest Route (7), students will create a coordinate system for the VIQC Slapshot Playground and use the coordinates to perform calculations to move from one location to another using the shortest possible route. In Aim the Goal Zone (8) and Multitasking Snapshot (9), students continue to use their coordinate grid to move to dispensers and remove discs from the dispensers. They are challenged to change the velocity of the Intake to score as many discs in the 4-point zone as possible. They will apply their skills with the coordinates to plan the trajectory of the disc. In Smart Planner (10), students will apply all of the skills they have learned in Activities 1 through 9 to get their highest possible score in VIQC Slapshot! Teacher Resources The VIQC Slapshot Activity Lab is a sequenced version of the Dispenser Dash, Take a Shot, and Aiming Disks VEXcode VR Activities. Solutions for each activity can be found in the VEXcode VR Teacher Portal and is also linked here. To help facilitate your students completing this Activity Lab, you can also use the following VEX Library articles. View this article to learn more about facilitating coding conversations with students. Learn more about using pair programming to support student collaboration in this article. Read this article to learn about helping students to build resilience as they work through a project. To learn about the robot used in the VIQC Slapshot Playground, the features of the Playground, and more, see these articles from the VEX Library. Teaching with the VIQC Slapshot Activity Lab Welcome to the VRC Over Under Playground in VEXcode VR! As a registered VRC Team for the 2023-2024 season, you can play VRC Over Under Virtual Skills in VEXcode VR and submit your score to the VRC Virtual Skills Leaderboard during the season. View this article to learn more about accessing VRC Over Under with your team registration information. If you are not a registered VRC team for the 2023-2024 season, you must have a VEXcode VR Premium License to use the VRC Over Under Playground in VEXcode VR. Once you have a Premium License, you will activate your License Key to log in to VEXcode VR and access the VRC Over Under Playground. Watch the following video to learn how to get started with the VRC Over Under Playground in VEXcode VR. Articles to Help You Get Started To get started, learn about the ways to score points in the Over Under game manual. Then, for added challenges, learn more about Striker, the Hero Bot for the game, and other details about the Field in order to strategize and improve your score. Before diving into coding, it is important to understand Over Under and how it is played . Read the scoring section of the Game Manual to learn more, and begin developing your scoring strategy. Try using the Example Projects to see possible ways to code Striker to move and score in different ways. To learn more about accessing Example Projects in VEXcode VR, view this article for Blocks projects, or this article for Python projects. Get familiar with the Over Under Playground Window in VEXcode VR and its features, like the camera angles, so that you can strategize your gameplay. View this article to learn more about the Playground Window. Learn about starting locations and the rest of the Pre-Match Checklist in this article. Read about the Field dimensions and layout on the VRC Over Under Playground to help plan your project. View this article to learn more. Check out Striker, the Hero Bot for Over Under, and all of its controls, sensors, and features, so you can code the robot to score in different ways. Learn more about the robot's features in this article. Virtual Striker is equipped with a GPS Sensor so that you can you use location details and sensor feedback to navigate the Field. Learn more about using the GPS Sensor in Over Under in this article. Looking for more? Want to learn more advanced coding to help you beat your high score? VEXcode is used with all VEX Robotics platforms. Check out the Computer Science Level 1 - Blocks course or the Computer Science Level 1 - Python course and learn more about coding with VEXcode! Get Started with the VRC Over Under Playground in VEXcode VR Welcome to the VIQRC Full Volume Playground in VEXcode VR! As a registered VIQRC Team for the 2023-2024 season, you can play VIQRC Full Volume Virtual Skills in VEXcode VR and submit your score to the VIQRC Virtual Skills Leaderboard during the season. View this article to learn more about accessing VIQRC Full Volume with your team registration information. If you are not a registered VIQRC team for the 2023-2024 season, you must have a VEXcode VR Premium License to use the VIQRC Full Volume Playground in VEXcode VR. Once you have a Premium License, you will activate your License Key to log in to VEXcode VR and access the VIQRC Full Volume Playground. Watch the following video to learn how to get started with the VIQRC Full Volume Playground in VEXcode VR. Articles to Help You Get Started To get started, learn about the ways to score points in the Full Volume game manual. Then, for added challenges, learn more about Byte, the Hero Bot for the game, and other details about the Field in order to strategize and improve your score. Before diving into coding, it is important to understand Full Volume and how it is played. Read the scoring section of the Game Manual to learn more, and begin developing your scoring strategy. Try using the Example Projects to see possible ways to code Byte to move and score in different ways. To learn more about accessing Example Projects in VEXcode VR, view this article for Blocks projects, or this article for Python projects. Get familiar with the Full Volume Playground Window in VEXcode VR and its features, like starting locations and camera angles, so that you can strategize your gameplay. View this article to learn more. Check out Byte, the Hero Bot for Full Volume, and all of its controls, sensors, and features, so you can code the robot to score in different ways. Learn more about the robot's features in this article. Curious about the dimensions and features of the VIQRC Field? Learn more about the Field in this article, to help you as you start planning your project. Looking for more? Want to learn more advanced coding to help you beat your high score? VEXcode is used with all VEX Robotics platforms. Check out the Computer Science Level 1 - Blocks course or the Computer Science Level 1 - Python course and learn more about coding with VEXcode! Get Started with VIQRC Full Volume Playground in VEXcode VR Understanding Robot Features in VIQC Full Volume for VEXcode VR Understanding the VIQC Full Volume Field Layout Using the VIQC Full Volume Playground Window Submitting a Score for VIQC Full Volume Virtual Skills in VEXcode VR You can use the GPS Sensor to help you navigate the VRC Over Under Playground in VEXcode VR, with the (X, Y) coordinates of locations. How the GPS Sensor Works in VRC Over Under in VEXcode VR The GPS (Game Positioning System) Sensor, uses the VEX Field Code on the interior of the Field to triangulate X, Y position and heading. That checkerboard pattern in the Field Code is used to identify the location for each individual block in that pattern. The VEX GPS is an absolute position system, so it does not drift nor does it require calibration on a per-field basis. To sense the Field Code, the VEX GPS Sensor, a black and white camera, is mounted on the rear of the robot and faces rearwards. The GPS Sensor reports the (X, Y) coordinates of the center of rotation of Striker on the Field, in millimeters or inches. Identifying (X, Y) Coordinates on the VRC Field The VRC Over Under Field in VEXcode VR ranges from approximately -1800mm to 1800mm for the X and Y positions. The starting location of Striker depends on the starting position selected. The center location, or the origin (0,0), is located in the center of the Field. Identifying the (X, Y) Coordinates of the GPS Sensor The GPS Sensor can be used to identify the X and Y coordinates of Striker on the Field. These coordinates reflect the location of Striker's center of rotation, which is located between the front wheels, as indicated in this image. Reporter blocks from the Sensing category in the Toolbox can be used to report positional values from the GPS Sensor in your project. The current X and Y coordinates of Striker's GPS Sensor on the Field can be displayed in the Print Console using blocks from the Looks category in the Toolbox. Using the GPS Sensor to Help Striker Navigate the Field You can use the GPS Sensor to help Striker navigate the Field by driving to specific locations using your knowledge of the Cartesian coordinate system. Using the GPS Sensor, Striker can drive along the X or Y-axes until the value of the sensor is greater than or less than a threshold value. This allows Striker to drive using sensor feedback instead of set distances. In this project, Striker will drive forward from starting position A, until the value of the Y-axis is greater than -1000 millimeters (mm), then stop, placing Striker in position to turn and collect a Triball. Note: You may have to account for the robot’s inertia or drift when setting your parameters. GPS Sensor Location and the Center of Rotation on Striker The GPS Sensor is mounted in the rear of the robot, whereas Striker's center of rotation is located in the front of the robot. The GPS Sensor is configured in VRC Over Under in VEXcode VR to account for this offset (approximately -150 mm on the X axis, and -295 mm on the Y axis), so that the values that are reported reflect the center of rotation of Striker. (X, Y) Coordinates of Game Elements in VRC Over Under for VEXcode VR Knowing the coordinates of game elements, like the Triballs and scoring zones, can help you plan your projects in VRC Over Under in VEXcode VR. The following reference is provided as a guide, based on the Field setup at the start of each Match, for the approximate center point coordinate locations of the game elements on the VRC Field in the Playground. Scoring Zone Coordinates Triball Coordinates Post Coordinates Identifying the GPS Heading of Striker The GPS Sensor can also be used to identify the GPS heading. The heading ranges from 0 degrees to 359.9 degrees, following a compass heading style. When using the GPS Sensor to detect location, the GPS heading will remain constant in relation to the Field, regardless of the starting position of the robot. Identifying Location Details Using the GPS Sensor in the VRC Over Under Playground To begin your Virtual Skills Over Under Match, you must use the Pre-Match checklist to select your robot starting location, your robot starting direction, whether or not your robot has a preload, and the Field preload location. For more information about Match Load Triballs, view the VRC 2023-2024 Over Under Game Manual and Appendix B - Robot Skills Challenge. How to Choose a Starting Location When you open the VR Virtual Skills Over Under Playground, the Pre-Match Checklist will be visible. The first item in the checklist is the starting location. The default starting location is "E". To choose a different starting location, select the Edit button in the Pre-Match Checklist. Then select the letter that corresponds to the desired starting location. How to Choose a Starting Direction Select the Starting Direction box in the Pre-Match Checklist. Two arrow buttons will appear beside Striker. Select the arrow button to rotate Striker to face your chosen starting direction. How to Select Robot Preloads and Field Preload Locations The Robot Preload setting defaults to 'Yes.' If you do not want to start with a preload, select the toggle switch to turn it to 'No.' The preloaded Triball will removed from Striker. To change your Field Preload Location, select the Field Preload Location Box in the Pre-Match Checklist, and then select the Edit button. Next, select the number that corresponds to your desired Field Preload Location. Select the 'Done' button when you are finished. How to Close and Reopen the Pre-Match Checklist When you open the VRC Over Under Playground, the Pre-Match Checklist will be open. After you have finished making your selections, select the 'Begin Run' button to close the Pre-Match Checklist. To reopen the Pre-Match Checklist, select the 'Starting Position' button on the left side of the Playground Window. For additional information about using the VRC Over Under Virtual Skills Window, see this article. Using the Pre-Match Checklist in VRC Virtual Skills The Field in the VRC Over Under Playground in VEXcode VR has the same dimensions and setup as the Field for an in-person Skills Match in the 2023-2024 VRC Over Under Competition game. This information can be useful when creating projects in VRC Over Under for VEXcode VR. Field Dimensions Each tile on the Field is 600mm by 600mm (~24 inches by 24 inches). The Field is six full tiles long. In total, the Field is 3.65m (~12 feet) long, as indicated by the blue line in this image. The Field is six full tiles wide. In total, the Field is 3.65m (~12 feet) wide, as indicated by the red line in this image. Measurement Notes Each full tile measurement begins and ends at the edge of the tile. The total Field measurements begin and end at the inner edge of the Field perimeter. Understanding the VRC Over Under Field Layout As a registered VRC Team playing VRC Over Under Virtual Skills in VEXcode VR during the 2023-2024 competition season, you can submit your score to the VRC Virtual Skills Leaderboard. When a project is stopped, or the timer hits 0 seconds, the Match Results window will appear. The total score for the project will be shown along with the time remaining when the project was stopped, as shown in this image. To submit your score, select the 'Submit Score' button. Note: The 'Submit Score' button will be available once score submissions are open for the 2023-2024 VRC season. Registered teams can repeatedly submit scores, with the highest one determining their rank in the Virtual Skills Standings. Select the 'Retry' button to close the Match Results window and return to the VRC Over Under Playground. Selecting 'Retry' will reset the Field. Submitting a Score for VRC Over Under Virtual Skills in VEXcode VR As a registered VIQRC Team playing VIQRC Full Volume Virtual Skills in VEXcode VR during the 2023-2024 competition season, you can submit your score to the VIQRC Virtual Skills Leaderboard. When a project is stopped, or the timer hits 0 seconds, the Match Results window will appear. The total score for the project will be shown along with the time remaining when the project was stopped, as shown in this image. To submit your score, select the 'Submit Score' button. Note: The 'Submit Score' button will be available once score submissions are open for the 2023-2024 VIQRC season. Select the 'Retry' button to close the Match Results window and return to the VIQRC Full Volume Playground. Selecting 'Retry' will reset the Field. Submitting a Score for VIQRC Full Volume Virtual Skills in VEXcode VR The robot used in VEXcode VR Over Under is a virtual version of Striker, the VEX V5 Hero Bot, used for the 2023-2024 VEX Robotics Competition (VRC) Over Under. Virtual Striker has the same dimensions and motors as the physical Striker, but with added sensors for autonomous programming in VEXcode VR. On the Over Under Playground in VEXcode VR, there is only one robot, and it is already preconfigured. This eliminates the need for a robot configuration, or a predetermined template project. Robot Controls Striker has the following controls: A drivetrain. This enables the “Drivetrain” category of blocks in the Toolbox of VEXcode VR to drive and turn the robot. An Arm that is controlled by the Arm Motor. The Arm can be raised and lowered. This allows the robot to transport Triballs. The Arm can be lowered using the [Spin for] block. The Arm will be fully lowered when spun forward for 1200 degrees. An Intake that is controlled by the Intake Motor. The Intake can be spun forward and in reverse. This allows the robot to collect and score Triballs. The Intake can be spun using the [Spin for] block. The Intake will collect a Triball when spun forward 360 degrees and score or drop a Triball when spun in reverse for 360 degrees. Robot Sensors Virtual Striker has added sensors for autonomous programming in VEXcode VR. Inertial Sensor The Inertial Sensor is used with the drivetrain to allow Striker to make accurate and precise turns using the drivetrain heading. The drivetrain heading reports a value from 0 to 359.9 degrees, and clockwise is positive. For more information on the Inertial Sensor, view this article from the VEX Library. Optical Sensor The Optical Sensor reports if an object is close to the sensor, and if so, what color that object is. The Optical Sensor can also report the brightness and the hue value of an object in degrees. The Optical Sensor is located under the Arm of Striker, pointing towards the Intake. It can be used to determine when a Triball is in the Intake, and also what color that Triball is. For more information about the Optical Sensor, see this VEX Library article. Rotation Sensor The Rotation Sensor can report rotational position, total rotations, and rotation speed. The shaft that rotates the Arm on Striker is placed through the Rotation Sensor. This sensor can be used to measure the rotational position, total rotations, and rotation speed of the Arm as they are raised and lowered. The rotational position when the Arm is raised is 0 degrees (default at the start of the project). The rotational position when the Arm is fully lowered is 168 degrees. Note: These values are different from the 1200 degrees used in the [Spin for] block to fully lower the Arm. For more information about the V5 Rotation Sensor, view this article from the VEX Library Game Positioning System (GPS) Sensor The GPS Sensor can report the current X and Y position of the center of rotation of Striker in millimeters or inches. The GPS Sensor can also report the current heading in degrees. The GPS Sensor is located near the back of Striker, and is used to determine the robot’s position and orientation on the Field by reading the GPS Field Code Strips along the inside perimeter of the Field. You can use the GPS Sensor to help Striker navigate the Field by driving to specific locations using your knowledge of the Cartesian coordinate system. Using the GPS Sensor, Striker can drive along the X or Y-axes until the value of the sensor is greater than or less than a threshold value. This allows Striker to drive using sensor feedback instead of set distances. Knowing the coordinates of game elements, like Triballs and Nets, can also help you plan your projects in VRC Over Under. For more information on identifying location details in VEXcode VR Over Under using the GPS Sensor, see this VEX Library article. Understanding Robot Features in VRC Over Under for VEXcode VR The robot used in VEXcode VR Full Volume is a virtual version of Byte, the VEX IQ Hero Bot, used for the 2023-2024 VEX IQ Robotics Competition (VIQRC) Full Volume. Virtual Byte has the same dimensions and motors as the physical Byte, but with added sensors for autonomous programming in VEXcode VR. On the Full Volume Playground in VEXcode VR, there is only one robot, and it is already preconfigured. This eliminates the need for a robot configuration, or a predetermined template project. Robot Controls Byte has the following controls: A drivetrain. This enables the “Drivetrain” category of blocks in the Toolbox of VEXcode VR to drive and turn the robot. An Arm that is controlled by the Arm Motor Group. The Arm can be raised and lowered. This allows the robot to do things like transport game objects. The Arm can be raised using the [Spin for] block. The Arm will be fully raised when spun forward for 1300 degrees. An Intake that is controlled by the Intake Motor Group. The Intake can be spun forward and in reverse. This allows the robot to collect and score game objects. The Intake can be spun using the [Spin for] block. The Intake will collect a Block when spun forward for 90 degrees, and score or drop a Block when spun in reverse for 90 degrees. Robot Sensors Virtual Byte has added sensors for autonomous programming in VEXcode VR. Inertial Sensor The Inertial Sensor built into the VEX IQ (2nd gen) Brain is used with the drivetrain to allow Byte to make accurate and precise turns using the drivetrain heading. For more information on the Inertial Sensor built into the VEX IQ (2nd gen) Brain, view this article from the VEX Library. The drivetrain heading reports a value from 0 to 359.9 degrees, and clockwise is positive. Distance Sensor The Distance Sensor reports if an object is close to the sensor, as well as the approximate distance from the front of the sensor to an object, in millimeters or inches. The Distance Sensor is in the front of Byte and can be used to detect any objects or obstacles. Note that Byte's Arm should be raised enough to not block the Distance Sensor when gathering readings. For more information about the IQ (2nd gen) Distance Sensor, see this VEX Library article. Optical Sensor The Optical Sensor reports if an object is close to the sensor, and if so, what color that object is. The Optical Sensor can also report the brightness and the hue value of an object in degrees. The Optical Sensor is located inside Byte's Intake. It can be used to determine when a Block is in the Intake, and also what color that Block is. For more information about the Optical Sensor, see this VEX Library article. Bumper Switch The Bumper Switch reports if it is currently being pressed or not. The Bumper Switch is located inside the Intake behind the Optical Sensor and can be used to determine when a Block is loaded in the Intake. For more information about the Bumper Switch, see this VEX Library article. Understanding Robot Features in VIQRC Full Volume for VEXcode VR If the V5 Claw, commonly attached to the V5 Clawbot or other V5 build, has been disassembled, the 3D Build Instructions linked in this article will guide you through the repair and reassembly. The V5 Claw (formally named V5 Claw Kit v2), is a versatile and essential component in the VEX V5 ecosystem. Embedded and linked below are step-by-step 3D Build Instructions designed to empower users of all skill levels to confidently rebuild their V5 Claw, restoring its functionality and ensuring continued success in various robotics applications. Select this link to open the above 3D Build Instructions in a separate tab. Repairing and Reassembling a V5 Clawbot Claw (V5 Claw Kit v2) While coding in VRC Over Under Virtual Skills, you may utilize Match Load Triballs in accordance with the guidelines set out in the VRC 2023-2024 Over Under Game Manual and Appendix B - Robot Skills Challenge. Match Load Triball Locations Select the eye icon to see where each of the Match Load areas are located. Location labels, 'LZ,' will appear on the Field beneath any game elements. Because there are two Match Load Zones, they will be labeled 'LZ 1' and 'LZ 2.' To remove these labels, select the eye icon again. How to Place Match Load Triballs You can see the current number of Match Load Triballs available at any point during the match in the upper left of the Playground Window. The number of Match Loads you begin with is dependent on if you choose to use a preload in the Pre-Match Checklist. Any preloads not used will be added to total Match Load Triballs. Select the button that corresponds with the Match Load Zone you want to use where you want to place a Match Load Triball. The 'LZ 1' button will put a Triball in the Match Load Zone at the top left of the Field and the 'LZ 2' button will put a Triball in the Match Load Zone on the bottom left side of the Field. Note: You must start the project before any Match Load Triballs can be placed on the Field. If a Triball is already present in the Match Load Zone, the button for that zone will be disabled and appear transparent. Match Loads can be added more than once while the project is running. Using Match Loads in VRC Over Under for VEXcode VR The VEX Robotics Competition (VRC) Virtual Skills Playground is a virtual representation of the VRC Over Under (2023-2024) Competition Game. The Virtual Skills Over Under Playground Window is a space for a virtual version of this year's Hero Bot, Striker, to play VRC Over Under Virtual Skills. The Pre-Match Checklist When you open the VRC Virtual Skills Over Under Playground Window, the Pre-Match Checklist will be open. To learn more about making selections in the Pre-Match Checklist, see this article. How to Start, Stop and Reset a Project Select the “Start” button to start a project. This button will change to a “Stop” button when a project is actively running. Selecting the “Stop” button will stop the project and the timer immediately. The Score Window will appear at this time. See below for more information on the Score Window. Select the “Reset” button to reset the timer, point value, and Field. How to View Your Score and the Timer Your score can be seen above the Field on the left side. This will be updated in real-time after the project is started. The timer is located above the Field on the right side. The timer begins when a project is started and counts down from 1:00. The timer will count down until “Stop” is selected, the [Stop project] Block is used in the project, or the timer reaches 0 seconds. How to Use Match Loads Match Loads are available to place on the Field during a match. See this article about Using Match Loads in VRC Over Under for VEXcode VR for more information. How to Retry and Close the Score Window The Score Window appears when the timer reaches 0, or if the project is stopped.The Score Window shows your team's name, number, total score, and Skills Stop Time. "Submit Score" will send your team's score to Robot Events. Note: The 'Submit Score' button will be available once score submissions are open for the 2023-2024 VRC season. For more information about submitting a score for VRC Over Under Virtual Skills in VEXcode VR, view this article. Select the “Retry” button to return to the Field and reset the timer and score. Select the “X” in the top-left corner to close the Score Window and return to the Field. This will not reset the Field, timer, or score. It will return to the Field exactly as it was at the moment the project was stopped. How to Expand and Shrink the Playground Window The window begins at a smaller size by default. If you want to expand the window, select the “Expand” button at the top left corner. Select “Shrink” in the top-left corner to return the window to the default size. How to Hide and Show the Playground Window Select the “Hide” button to collapse the VRC Virtual Skills Window. This will still keep the red toolbar at the top of the window visible. To view the full window again, select the “Show” button. How to Select Different Camera Views Select the “Top Camera” button to see an overhead view of the entire Field. This is the default view when you open the VRC Over Under Playground Window. Select the “Chase Camera” button to see a behind-the-robot view. Select the “Orbit Camera” button to see an overview of Striker and the full Field. How to View Settings Select the gear icon to open the Settings window. In this window, your team's name and number will appear. Data about your device will be displayed in the Settings window. This can be used to help troubleshoot any performance issues Using the VRC Over Under Playground Window The VIQRC Full Volume Playground is a virtual representation of the Field for the VIQRC Full Volume (2023-2024) Competition game. The VIQRC Full Volume Playground Window is a space for the Hero Bot, Byte, to interact and move to play VIQRC Full Volume Virtual Skills. How to Choose Your Starting Position The default starting position is at the “A” location. Select the 'Starting Position' button to choose a different starting position for your robot. Then, select a letter to choose your new starting position. How to Start, Stop, and Reset a Project Select the 'Start' button to start a project. This button will change to a 'Stop' button when a project is actively running. Selecting the “Stop” button will stop the project and the timer immediately. The Score Window will appear at this time. See below for more information on the Score Window. Select the “Reset” button to reset the timer, point value, and Field. How to View Your Score and the Timer Your score can be seen above the Field on the left side. This will be updated in real-time after the project is started. The timer is located above the Field on the right side. The timer begins when a project is started and counts down from 1:00. The timer will count down until 'Stop' is selected, the [Stop project] block is used in the project, or the timer reaches 0 seconds. How to Retry and Close the Score Window Select the 'Retry' button to return to the Field and reset the timer and score. Select the “X” in the top-left corner to close the Score Window and return to the Field. This will not reset the Field, timer, or score. It will return to the Field exactly as it was at the moment the project was stopped. How to Expand and Shrink the Playground Window The window begins at a smaller size by default. If you want to expand the window, select the 'Expand' button at the top left corner. Select the 'Shrink' button in the top-left corner to return the window to the default size. How to Hide and Show the Playground Window Select the 'Hide' button to collapse the Playground Window. This will still keep the blue toolbar at the top of the window visible. To view the full window again, select the 'Show' button. How to Select Different Camera Views Select the 'Top Camera' button to see an overhead view of the entire Field. This is the default view when you open the VIQRC Full Volume Playground Window. Select the 'Chase Camera' button to see a behind-the-robot view. How to View Settings Select the gear icon to open the Settings window. Data about your device will be displayed in the Settings window. This can be used to help troubleshoot any performance issues. Using the VIQRC Full Volume Playground Window The VEX EXP system has been designed with the latest technology, sensors, and metal construction pieces to teach STEM concepts. There are many resources in this article that will help you get started and begin building with your new system. Note: Throughout this article, you will find links to other VEX Library articles and resources that will provide more detailed information about each of the subjects. Getting organized As you start to unpack your VEX EXP Kit, the first thing that becomes obvious is — there are a lot of parts. The first steps to success are to identify the parts. You may have just one Kit, or an entire bundle. For more information on Getting Started with an EXP Classroom Bundle, view this article from the VEX Library. Identifying the Parts VEX Robotics separates its VEX EXP parts into three categories: Electronics Structure &amp; Hardware Motion Tools &amp; Accessories The EXP Electronics include devices such as the EXP Brain, EXP Controller, Smart Motors (5.5W), EXP Battery, sensors, and cabling. The Structure &amp; Hardware parts include things like metal C Channels, U Channels, Angles, Plates, gussets and fasteners. The Motion parts include all of the things which move, such as wheels, gears, sprockets, and other accessories. Lastly, Tools and Accessories include the tools in order to assemble, maintain, and optimize your EXP Robot! You will notice that your EXP Storage Bins do the hard work for you. Structure Components and Tools (right) are all contained within the Structure Bin, while Motion Components will be bundled together in the remaining bin alongside Electronics (left). One way to identify all these parts is the EXP Parts Poster found at posters.vex.com. Another method of identifying parts is to search on the part name/part number from your kit’s part list and match them to the images of the parts found on the VEX website. Powering Up After you become familiar with your kit’s parts and organize your kit, the next step is to prepare your EXP Robot Brain and EXP Controller for use. This will include: Charging the EXP Controller. Charging the EXP Battery. Connecting the EXP Robot Brain with the EXP Robot Battery. In addition, your EXP Controller will need to be paired with the EXP Robot Brain and your EXP Robot Brain will need to have its firmware updated. To assist you there are VEX Library articles providing details on how to accomplish each of these tasks. The articles are listed below. Charging the EXP Controller Charging your Controller is accomplished with the USB-C connection. For more information on your Controller refer to: Charging the EXP Controller Understanding Button and Joystick Names on EXP Controller Understanding Indicator Lights on EXP Controller Charging the EXP Battery The next step in powering up your VEX EXP System is to charge the EXP Battery. This is accomplished with another USB-C connection. The EXP Battery has LED indicators to report the status of the battery.View this animation to see how to check the Battery level using the Battery's indicator lights. 1 light = 0-25% charge 2 lights = 25-50% charge 3 lights = 50-75% charge 4 lights = 75-100% charge For more information about charging the EXP Robot Battery refer to: Charging the EXP Battery Using the VEX EXP Robot Battery Connecting the EXP Brain to the EXP Battery After the EXP Battery has been charged, it will need to be connected to the EXP Brain. This is accomplished inserting the EXP Battery into the slot underneath the EXP Brain. The EXP Cable has a locking tab and can only be inserted in one orientation. The battery needs to be firmly inserted into the EXP Brain until it locks in place. For more information about connecting the EXP Battery to the EXP Brain refer to: Connect - Battery for VEX EXP Pairing the EXP Brain and EXP Controller After the EXP Brain and the EXP Controller both have charged batteries, you will need to pair the two in order to establish communication. This is accomplished by navigating to the Link option in the EXP Brain's Settings, and quickly double pressing the EXP Controller's Power Button while simultaneously holding both of the Left Bumpers. Once a EXP Controller and a EXP Brain are successfully paired this will not need to be done again. For more information regarding pairing a EXP Controller with a EXP Brain refer to Wirelessly Pairing an EXP Controller to an EXP Brain. Updating the Firmware Many VEX EXP products contain their own internal processors and run on a special Operating System. This software is the VEX EXP Firmware and is called VEXos. It is important to update your new equipment’s firmware in order for it to function correctly. For more information on updating your firmware refer to these articles: Updating VEX EXP Brain Firmware in App-based VEXcode EXP Updating VEX EXP Brain Firmware in Web-based VEXcode EXP Updating VEX EXP Controller Firmware in App-based VEXcode EXP Updating VEX EXP Controller Firmware in Web-based VEXcode EXP (Mac/Chromebook) Updating VEX EXP Controller Firmware in Web-based VEXcode EXP (Windows) Help with Instructions There are a number of options for building your first robot. Whether it will be the EXP BaseBot, one of the many builds found on the VEX Robotics site, or one of the builds found in the STEM Labs; it is recommended to start with a set of instructions in order to familiarize yourself with the VEX EXP system before assembling your first custom-designed robot. Overview of Build Instructions Build Instructions are either a .pdf such as the Clawbot EXP Build Instructions or 3D Build Instructions, as found with the Speed Build. Each of these Build Instructions includes a set of helpful hints and detailed steps which will guide you throughout the build process. Helpful Hints for Using Build Instructions A crucial part of the design and the educational process is making mistakes. As you build your first robot you will be experiencing this process. Here are a few hints to help limit some of mistakes that can be made: Inventory of parts - Be sure to collect all the correct parts prior to starting each step. Green lines - Many of the illustrations for assembly will have green lines to indicate where parts should go. Orientation of parts - Pay close attention to the orientation of parts within the illustrations. For example, a gear placed on the wrong side of a C channel will not work because it will not line up with the driving gear on the Smart Motor that will move the gear. Notations for connecting cables - When connecting Smart Cables between a device and the EXP Brain the number notation indicates the Smart Port number on the EXP Brain the cable needs to be plugged into. Assembly Tips In addition to the many tips which are provided in the build instructions, here are some additional general assembly tips which will assist you with your first robot. For a walkthrough guide to build your first EXP Robot, view this article from the VEX Library. Information on Parts The VEX EXP system has many different types of parts. Substituting the wrong part for an instruction set in most cases does not work. An understanding of the EXP parts can be very helpful. Structural - Structural metal parts include C-channels, Flat Beams, Gussets, and Plates. The instruction sets within the Builds should require no modifications to the structural pieces. For more information refer to, Building with EXP Motor Groups Fasteners - Earlier versions of the VEX Educational Robot system utilized screws with a hex socket heads for tightening. The EXP system uses star sockets on the heads of the screws. Star sockets are less prone to stripping and allows you to firmly tighten screw and nut systems. For a walkthrough guide to using EXP tools and fasteners, view this article from the VEX Library. For more information on fasteners refer to: Overview of VEX Screws Standoff Retainers - Structure for VEX EXP Wheels - There are many different options for wheels to use on a EXP Robot. The wheels come in several different sizes and are available in traction versions or wheels designed for omni-directional motion. For more information about wheels refer to, Understanding EXP Wheels. Gears and sprockets - The gears and sprockets which are used on the EXP robot to transfer power from the Smart Motors are sized by their number of teeth. For more information refer to: Overview of EXP Chains and Sprockets Assembling Chain and Tank Treads The VEX EXP system has chains and tank treads which can be used with sprockets. These parts are assembled by connecting individual links together and this allows for custom lengths to be used between sprockets. The links can be assembled by bringing two together at a slight angle, aligning the hole on one link with the boss on the next. Then twist the two links until they snap together as a unit. Example of assembling Chain Links. Example of assembling Tank Treads. To disassemble to chain/tank tread links, reverse the procedure. One technique which may help when connecting the two ends of an assembled chain/tank tread is to lay the chain/tank tread on a sprocket while connecting the two ends. What is Next? Once you have assembled your first robot, you can now program it! The Get Started with VEX EXP article will help you get started with programming your robot under the section of coding. The next adventure will be designing your own robot. When you are ready to start building your first custom-designed robot, the following articles will assist you: Building EXP Robot Arms Building EXP Robot Lift Systems Precautions and Safety Guidelines When Working with VEX EXP Robots Building with VEX EXP If you're a K-12 teacher or VEX Competition Coach seeking to deepen your skills, explore innovative teaching approaches, and connect with a community of dedicated educators, VEX Professional Development Plus has the perfect solution for you: a dynamic and supportive Professional Learning Community (PLC). Embark on this enriching journey with us and elevate your teaching expertise, while creating unforgettable learning experiences for your students. Why join a Professional Learning Community? Teamwork and Collaboration: As a PLC member, you'll have the chance to collaborate with fellow educators, exchanging insights, challenges, and triumphs. You'll learn from your peers, gather fresh ideas, and design effective teaching strategies to apply in your classroom or VEX competition coaching. Continuous Growth: PLCs prioritize the ongoing development and enhancement of their members. By participating, you'll engage in continuous professional development, ensuring your skills and knowledge stay relevant. Research indicates that educators involved in PLCs are more effective in their practice, leading to improved student outcomes. Boosted Student Engagement: PLCs help you stay informed about cutting-edge teaching methods and instructional practices that foster student engagement. A study by Goddard, Goddard, and Tschannen-Moran (2007) discovered that teacher collaboration in PLCs positively influences student achievement. By joining a PLC, you'll be better prepared to captivate and involve your students in the learning process. Valuable Networking Opportunities: Membership in a PLC enables you to connect with educators from diverse backgrounds and locations, broadening your professional network. These connections can lead to future collaborations, mentorships, and career prospects. Emotional Support and Camaraderie: Teaching can be demanding, making a robust support system crucial. PLCs offer emotional support, assisting you in navigating difficult situations and celebrating your accomplishments. The sense of camaraderie in a PLC helps alleviate feelings of isolation and enhances overall job satisfaction. Personalized Coaching and One-on-One Meetings: As a PLC participant, you can schedule one-on-one meetings with VEX staff members and receive personalized coaching. This individualized attention ensures that you receive targeted guidance and feedback tailored to your specific needs and goals, ultimately fostering your growth as an educator. In conclusion, joining a VEX Professional Development Plus Professional Learning Community offers numerous benefits for K-12 teachers and VEX Competition Coaches. From fostering collaboration and continuous growth to enhancing student engagement and providing emotional support, PLCs empower educators to excel in their practice. By participating in a PLC, you'll not only elevate your teaching expertise but also create unforgettable learning experiences for your students, making it an invaluable investment in your professional journey. Benefits of the Professional Learning Community in VEX PD+ The videos in VEX IQ (2nd gen) STEM Labs are an essential resource for educators and students using VEX STEM Labs. There may be instances in which you would like to add them to an LMS, or other instances in which videos from the VEX server may be blocked by network firewalls or other restrictions. In order to provide access to the STEM Lab videos, we have supplied a shared Google Drive folder containing all of the videos from the IQ (2nd gen) STEM Labs. This article explains the contents and structure of the files in this folder. Select this link to access the Google Drive folder. When you open the Google Drive folder, you will see a folder for each IQ (2nd gen) STEM Lab. Upon opening one of the STEM Lab folders, you will see a folder for each Lesson in the STEM Lab. Inside each of the Lesson folders are the videos for that Lesson. They are listed in order as they appear in the Lesson. All videos are named according to the same system. The sections of each video name are separated by underscores and are as listed in this example: VEX Platform (IQ) STEM Lab Name (Castle Crasher) Lesson Number (Lesson 2) # of Video in that Lesson (2) Lesson Page (Learn) Name of Video (CalculatingTurns) Caption files for each video are also included in a separate folder. They are provided in .srt and .vtt formats. Accessing VEX IQ (2nd gen) STEM Lab Videos for Export Each VEX Robotics Competition (VRC) registered team is provided a Virtual Skills Key for accessing VRC Virtual Skills in VEXcode VR. Finding Your Team's Virtual Skills Key To find your team’s Virtual Skills Key, go to RobotEvents.com. 1. Select “Login.” 2. Enter the email address and password associated with your Robot Events account. Then select the "Login" button. Don't have an account? Go here to create a RobotEvents account. 3. Once you have logged into your account, select “My Teams” from the account navigation. 4. Here you will see a list of your registered teams with their Virtual Skills Keys. No key listed? Make sure that your team’s registration has been renewed for the current season. Note: The Virtual Skills Key is specific for each team. If you have multiple teams, make sure to record which Key goes with each team. Entering Your Team's Virtual Skills Key Before you can enter your team’s Virtual Skills Key, launch VEXcode VR by visiting vr.vex.com in a Chrome browser. Note: The Virtual Skills Key can be used by multiple members of the same team. When VEXcode VR is launched, you may see this window. Select 'Login Here' to launch the login window. If you do not see the window above, select 'File' then 'Login Code' in order to launch the login window. Enter your team number into the login window. Once the team number is entered, a space will appear to enter the Virtual Skills Key. Note: The Virtual Skills Key is not case-sensitive. After entering both a Team Number and Virtual Skills Key, select 'Submit' to complete the login process. Once logged in, the icon in the top left corner will turn white and red. Opening the Playground Select 'File' then the type of project you want to create, Blocks or Text. Select this year's VRC Virtual Skills game. A prompt may appear to inform you that you will be changing the robot model and beginning a new project. Select 'Yes' to continue. Select 'Open Playground' in the Toolbar to then open this year's Virtual Skills game. Accessing VRC Virtual Skills with a Virtual Skills Key When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps. The steps of this process are: Identify the problem Check hardware Check software Analyze and apply data Identify the Problem The first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor? If you need more information to determine which sensor may be the problem, read the article(s) below related to the sensors on your robot. VEX GO Sensors: Coding with the VEX GO Eye Sensor Coding with the VEX GO LED Bumper Coding with the VEX GO Brain Coding with the VEX GO Electromagnet Once you have identified which sensor is causing the unintended behavior, you can move forward in the process. Check Hardware The second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor. Check Sensor Placement Begin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like another part of your robot? Ensure that the sensor has the space needed to operate as intended. As shown here, the Eye Sensor has a clear line of vision to the object it is meant to detect. Check Sensor Connection Test the sensor’s functionality by looking at the data reported in the VEX Classroom App. Once you have selected the VEX GO Brain you are troubleshooting, select 'Show Device Info' to view the data for sensors connected to that Brain. This can help you validate that the sensor is plugged in and working. To learn more about the device info shown in the VEX Classroom App view this article. Once you have the Device Info displayed in the Classroom App, see if the sensor is reporting data. If not, ensure your sensors are plugged in correctly. When plugging in sensors, you should hear a snap when the sensor’s locking tab is fully engaged in a port. Be sure the port that the sensor is connected to matches what is shown in the Classroom App as well. View this article to learn more about how each of the sensors connects to the GO Brain. You can also try swapping out the sensor you are using with another to see if that resolves your issue. If you changed something with your sensor placement or sensor connection, test your project again to see if this resolved the issue. If your sensor placement and connection did not change, move onto the next step to continue the troubleshooting process. Check Software Once you have identified that the sensor is placed on and connected to the robot successfully, you can look to the VEXcode GO project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor. If you apply any of these strategies to your VEXcode GO project, test your project again to see if this resolved the issue. Check Firmware and Configuration Begin by ensuring that your GO Brain’s firmware is up to date. The Brain will automatically update when connected to VEXcode GO, as shown in this image. You can also check and update your GO Brain’s firmware using the VEX Classroom App. View this article to learn more about updating the GO Brain firmware with the VEX Classroom App. Now that you are sure all devices are correctly connected to the Brain, check the Device Configuration in VEXcode GO. View the articles in this section to learn more about configuring your robot in VEXcode GO. Check to be sure all of the sensors are present in the configuration. Then, check to be sure each one is connected to the correct port. Change any incorrect device configurations. Run an Example Project Open an Example Project that uses the sensor you are troubleshooting. Select 'File' then 'Open Examples' to view the Example Projects in VEXcode GO. Open an Example Project that uses the sensor you are troubleshooting. You can select the ‘Sensing’ category to filter example projects. Once open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor. In the example project shown here, the note indicates that the Eye Sensor is being used to detect an object so that the robot can stop driving and turn when an obstacle is detected. Run the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this. You may also want to try to create your own simplified project to apply what you have learned from the example project to your task. Use Other VEXcode GO Tools There are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode GO. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting. The Help Read the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report and how to view those values, and examples of how to use the command in a project. View this article to learn more about accessing Help in VEXcode GO. Tutorials View a Tutorial video about the sensor you are using. Select the 'Tutorials' icon in the Toolbar to view the Tutorials in VEXcode GO. Open the Tutorial that uses the sensor or behavior you are troubleshooting. The Tutorial will then open in VEXcode GO for you to view. View this article to learn more about viewing Tutorial videos in VEXcode GO. Monitoring and Printing Data You can also view data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project. Viewing sensor data in the Monitor Console is helpful when you want to see the values changing as a VEXcode GO project is running. This can help you determine what reported values from the sensor to use as parameters in your project. Blocks in the Sensing category of the Toolbox can be added to the Monitor Console by selecting the checkbox beside the block, as shown in this image. View this article to learn more about viewing sensor values in the Monitor Console in VEXcode GO. Printing to the Print Console in VEXcode GO be used to display information as a project is running, to help provide visual cues to help see what is happening in a VEXcode GO project at a specific moment in a project. This can help make the visual connection between the project and the actions of the VEX GO Robot easier to see. In the image shown here, data about the robot's heading at various times while the project is run is being printed. Blocks from the 'Looks' category of the Toolbox are used to print to the Print Console in VEXcode GO. View this article for more information about using the Print Console in VEXcode GO. Analyze and Apply Data Next, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and monitoring or printing data to enable you to use the sensor effectively to accomplish your goal. You can also ask questions about your project to help you move forward. Think about things like: Is your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together. Did you try stepping through your project? Use the 'Step' button to run your project one block at a time. This can slow down the project execution to make it easier to see where your project is having a problem, or where issues with the project flow might be. View this article to learn more about how to step through a VEXcode GO project. Is your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors. Are your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need? Are your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps. Are you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values. Are you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run. Are you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter, or using a range of hue values, to see if that helps. Are you detecting an object within the sensor’s field of view? Remember that the field of view moves in conjunction with the movement of the robot. Are you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode GO. As you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot’s behaviors. You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode GO. Troubleshooting VEX GO Sensors Each VEX IQ Robotics Competition (VIQRC) registered team is provided a Virtual Skills Key for accessing VIQRC Virtual Skills in VEXcode VR. Finding Your Team's Virtual Skills Key To find your team’s Virtual Skills Key, go to RobotEvents.com. 1. Select “Login.” 2. Enter the email address and password associated with your Robot Events account. Then select the "Login" button. Don't have an account? Go here to create a RobotEvents account. 3. Once you have logged into your account, select “My Teams” from the account navigation. 4. Here you will see a list of your registered teams with their Virtual Skills Keys. No key listed? Make sure that your team’s registration has been renewed for the current season. Note: The Virtual Skills Key is specific for each team. If you have multiple teams, make sure to record which Key goes with each team. Entering Your Team's Virtual Skills Key Before you can enter your team’s Virtual Skills Key, launch VEXcode VR by visiting vr.vex.com in a Chrome browser. Note: The Virtual Skills Key can be used by multiple members of the same team. When VEXcode VR is launched, you may see this window. Select 'Login Here' to launch the login window. If you do not see the window above, select 'File' then 'Login Code' in order to launch the login window. Enter your team number into the login window. Once the team number is entered, a space will appear to enter the Virtual Skills Key. Note: The Virtual Skills Key is not case-sensitive. After entering both a Team Number and Virtual Skills Key, select 'Submit' to complete the login process. Once logged in, the icon in the top left corner will turn white and blue. Opening the Playground Select 'File' then the type of project you want to create, Blocks or Text. Select this year's VIQC Virtual Skills game. A prompt may appear to inform you that you will be changing the robot model and beginning a new project. Select 'Yes' to continue. Select 'Open Playground' in the Toolbar to then open this year's Virtual Skills game. Accessing VIQRC Virtual Skills with a Virtual Skills Key When your VR robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the troubleshooting process and provide tips for how to make your VR robot with sensors behave as intended. The steps of this process are: Identify the problem Check the VEXcode VR project Analyze and apply data Identify the Problem The first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor? Understand Sensor Placement In order to identify a problem with a sensor in VEXcode VR, it is important to understand what sensors are present on each model of VR robot, and where the sensors are located on the particular robot you are coding. Sensor placement differs depending on the model of VR Robot, which varies by Playground. Sensor location will affect how the sensor interacts with its environment. Use the table below to determine which robot you are coding, what sensors are included, and where the sensors on that robot are located. Select the article for more information on sensor placement. Robot Playground(s) Article VEX VR Robot Art Canvas + Castle Crasher + Art Canvas Castle Crasher Disk Maze Disk Mover Disk Transport Dynamic Castle Crasher Dynamic Wall Maze Encoded Message Grid Map Hidden Pixel Art Line Detector Number Grid Map Shape Tracer Wall Maze Coral Reef Cleanup (The underwater robot in this playground has the same sensors as the VEX VR Robot). Understanding Robot Features in VEXcode VR VR MazeBot Wall Maze + Understanding Features of the VR MazeBot VR Rover Rover Rescue Features of the VR Rover Disco VRC Virtual Skills - Spin Up Understanding Robot Features in VRC Virtual Skills Moby VRC Virtual Skills - Tipping Point Understanding Robot Features in VRC Tipping Point for VEXcode VR Slapshot VIQC Virtual Skills - Slapshot Understanding Robot Features in VIQC Virtual Skills Fling VIQC Virtual Skills - Pitching In Understanding Robot Features in VIQC Pitching in for VEXcode VR VR Competition Advanced Hero Robot GO Competition - Mars Math Expedition Understanding Robot Features in GO Competition - Mars Math Expedition Playground in VEXcode VR VR 123 Robot 123 Playspace Coding the VEX 123 Eye Sensor with VEXcode 123 (the VR 123 Robot has the same sensors). Check the VEXcode VR Project Once you have identified which sensor is causing the issue, and where it is located on the VR Robot, you can move on to checking your VEXcode VR project. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor. Run an Example Project Open an example project that uses the sensor you are troubleshooting. You can select the ‘Sensing’ category to filter example projects. For more information about using example Blocks projects in VEXcode VR, see this article. For more information about using example Python projects in VEXcode VR, see this article. Once open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor. In the example project shown here, the note indicates that this example project provides an example of how all the available Distance Sensor commands can be used with the robot. Run the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this. You may also want to try to create your own simplified project to apply what you have learned from the example project to your task. Use the Help Use the Help feature in VEXcode VR for the blocks or commands in the example project, or in your project, to learn about the data that is used, what values the command will report, and examples of how to use the command in a project. For more information about Accessing Help in a VEXcode VR Blocks project, see this article. Fore more information about Accessing Help in a VEXcode VR Python project, see this article. Read Data on the Monitor Console Monitoring sensor values in the Monitor Console in VEXcode VR allows the user to view real-time reports of a specific sensor value (or multiple values) in a project. To open the Monitor Window and view the Monitor Console, select the Monitor icon next to the Help. Blocks from the Sensing category in the tool box can be added and removed from the Monitor Console by selecting and deselecting the corresponding check box. Selected sensor values will be displayed in the Monitor Console, and can be used to adjust your VEXcode project as needed in order to get the desired behavior from the VR robot. For additional information about monitoring sensor values in VEXcode VR, see this article. To monitor sensor values in VEXcode VR Python, the monitor_sensors command needs to be added to the project. For more information about monitoring sensors in VEXcode VR with Python, see this article. Step Through Your Project The Step button in VEXcode VR Blocks allows you to see the Blocks in your project being executed on at a time. This can be helpful in trying to determine which sensing block is causing the issue in your project. The step button is located in the upper right corner of the screen, beside the Start button. For more information about Stepping Through a VEXcode VR Project, see this article. Analyze and Apply Data Next, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and printing data to enable you to use the sensor effectively to accomplish your goal. You can also ask questions about your project to help you move forward. Think about things like: Are you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values. Are your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need? Are you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run. Is your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors. Are you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter in the block or command. Are you detecting an object within the sensor’s field of view? Remember that the field of view moves in conjunction with the movement of the robot. Are you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. If you are coding in blocks, is your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together. Are you running your project in the correct Playground? The correct playground must be selected in order for your project to work as intended. As you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot’s behaviors. You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode VR. Troubleshooting Sensors in VEXcode VR When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps. The steps of this process are: Identify the problem Check hardware Check software Analyze and apply data Identify the Problem The first step to troubleshooting your sensor is to identify if the sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If you need more information to determine if a sensor may be the problem, read the article(s) below related to the sensors on your robot. VEX 123 Sensors: Coding the 123 Eye Sensor using the Coder Coding the 123 Eye Sensor with VEXcode 123 Identifying the 123 Robot's Features Once you have identified which sensor is causing the unintended behavior, you can move forward in the process. Check Hardware The second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor. Check that the sensor is not blocked Begin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like the Art Ring? Ensure that the sensor has the space needed to operate as intended. As shown here, the Eye Sensor has a clear line of vision to the object it is meant to detect. Check Sensor Connection Test the sensor’s functionality by looking at the data reported in the VEX Classroom App. Once you have selected the 123 Robot you are troubleshooting, select 'Show Device Info' to view the data for sensors connected to that Brain. This can help you validate that the sensor is working. To learn more about the device info shown in the VEX Classroom App view this article. You can also try swapping out the 123 Robot you are using with another to see if that resolves your issue. If you changed something to unblock the sensor or adjust a Coder card, test your project again to see if this resolved the issue. If your 123 Robot or Coder cards did not change, move onto the next step to continue the troubleshooting process. Check Software Once you have identified that the sensor is not blocked and is reporting data successfully, you can look to your Coder or VEXcode 123 project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor. If you apply any of these strategies to your project, test your project again to see if this resolved the issue. Check Firmware Begin by ensuring that your 123 Robot’s firmware is up to date. The robot will automatically update when connected to VEXcode 123, as shown in this image. If you are using the Coder, be sure both the robot and Coder firmware are up to date. You can check and update both your 123 Robot and Coder firmware using the VEX Classroom App. (The Coder firmware can only be updated with the Classroom App.) View this article to learn more about updating the 123 Robot with the VEX Classroom App. View this article to learn more about updating the Coder with the VEX Classroom App. Check Coder cards You can check that the Coder cards are being read accurately, and are not damaged. To view Coder card data in the Classroom App, select 'Show Device Info' for the Coder you are troubleshooting. The Coder card project that is in the Coder at the time of connection to the Classroom App will be shown. You may need to scroll to see the entire project. If the Coder project is changed, select ‘Update Cards’ to update the data in the Classroom App. If a Coder card shown does not match the Coder card in the Coder, you may have a damaged Coder card in the project. View this article to learn more about using the Classroom App with your Coder. To learn more about Coder card commands individually, view this article. Run an Example Project in VEXcode 123 Open an Example Project that uses the sensor you are troubleshooting. Select 'File' then 'Open Examples' to view the Example Projects in VEXcode 123. Open an Example Project that uses the sensor you are troubleshooting. You can select the ‘Sensing’ category to filter example projects. Once open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor. In the example project shown here, the note indicates that the Eye Sensor is being used to detect an object so that the robot can stop driving and turn when an obstacle is detected. Run the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this. You may also want to try to create your own simplified project to apply what you have learned from the example project to your task. Use Other VEXcode 123 Tools There are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode 123. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting. The Help Read the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report and how to view those values, and examples of how to use the command in a project. View this article to learn more about accessing Help in VEXcode 123. Monitoring and Printing Data You can also view data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project. Viewing sensor data in the Monitor Console is helpful when you want to see the values changing as a VEXcode 123 project is running. This can help you determine what reported values from the sensor to use as parameters in your project. Blocks in the Sensing category of the Toolbox can be added to the Monitor Console by selecting the checkbox beside the block, as shown in this image. View this article to learn more about viewing sensor values in the Monitor Console in VEXcode 123. Printing to the Print Console in VEXcode 123 be used to display information as a project is running, to help provide visual cues to help see what is happening in a VEXcode 123 project at a specific moment in a project. This can help make the visual connection between the project and the actions of the 123 Robot easier to see. In the image shown here, data about the robot's heading at various times while the project is run is being printed. Blocks from the 'Looks' category of the Toolbox are used to print to the Print Console in VEXcode 123. View this article for more information about using the Print Console in VEXcode 123. Analyze and Apply Data Next, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and monitoring or printing data to enable you to use the sensor effectively to accomplish your goal. You can also ask questions about your project to help you move forward. Think about things like: Are your 123 Robot and Coder connected? Be sure your robot and Coder are paired together, and are staying paired as the project is being run. View this article to be reminded of the pairing process. Did you try using the Step button on the Coder? Use the 'Step' button to run your project one Coder card at a time. This can slow down the project execution to make it easier to see where your project is having a problem, or where issues with the project flow might be. View this article to learn more about how to step through a Coder project. Are you checking the conditions more than once in your Coder project? Try adding a 'Go to start' card at the end of your project to cause it to return to the start and continue running. The 'Go to start' card creates a Forever loop to your project, so that the condition is checked repeatedly when the project is run. Are your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps. Is your whole stack attached to the {When started} hat block in your VEXcode 123 project? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together. Did you try stepping through your project in VEXcode 123? Use the 'Step' button to run your project one block at a time. This can slow down the project execution to make it easier to see where your project is having a problem, or where issues with the project flow might be. View this article to learn more about how to step through a VEXcode GO project. Is your VEXcode 123 project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors. Are your block parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need? Are you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values. Are you checking the conditions in your VEXcode 123 project more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run. Are you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter, or using a range of hue values, to see if that helps. If using the Coder, try changing the 'If' card to a different color and see if that helps. Are you detecting an object within the sensor’s field of view? Remember that the field of view moves in conjunction with the movement of the robot. Are you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode IQ. As you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot’s behaviors. You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about how to code your 123 Robot. Troubleshooting VEX 123 Sensors When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps. The steps of this process are: Identify the problem Check hardware Check software Analyze and apply data Identify the Problem The first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor? If you need more information to determine which sensor may be the problem, read the article(s) below related to the sensors on your robot. VEX EXP Sensors: Understanding Inertial Sensor Data from the VEX EXP Brain Using Bumper Switch with VEX EXP Using Distance Sensor with VEX EXP Using Optical Sensor with VEX EXP Once you have identified which sensor is causing the unintended behavior, you can move forward in the process. Check Hardware The second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor. Check Sensor Placement Begin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like another part of your robot? Ensure that the sensor has the space needed to operate as intended. As shown here, the Optical Sensor has a clear line of vision to the object it is meant to detect. Check Sensor Connection Test the sensor’s functionality by looking at the data reported in the Devices Screen on the VEX EXP Brain. This can help you validate that the sensor is plugged in and working. To access the Devices Screen, follow the steps in this article. Once the Devices Screen is open, see if the sensor is reporting data. If the sensor is not reporting data, ensure your sensors are plugged in correctly. When plugging in sensors to a Smart Port, you should hear a snap when the sensor’s locking tab is fully engaged in a port. When plugging sensors into a 3-Wire Port, the cable should be fully inserted in the correct orientation with the white wire closest to the Brain screen. You can also try swapping out the sensor you are using with another to see if that resolves your issue. If you changed something with your sensor placement or sensor connection, test your project again to see if this resolved the issue. If your sensor placement and connection did not change, move onto the next step to continue the troubleshooting process. Check Software Once you have identified that the sensor is placed on and connected to the robot successfully, you can look to the VEXcode EXP project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor. If you apply any of these strategies to your VEXcode EXP project, test your project again to see if this resolved the issue. Check Firmware and Configuration Begin by ensuring that your EXP Brain’s firmware is up to date. See this article to learn more about updating firmware on the EXP Brain in App-based VEXcode EXP. See this article to learn more about updating firmware on the EXP Brain in Web-based VEXcode EXP. Now that you are sure all devices are correctly connected to the Brain, check the Device Configuration in VEXcode EXP. Check to be sure all of the sensors are present in the configuration. Then, check to be sure each one is connected to the correct port. Change any incorrect device configurations. Run an Example Project Open an Example Project that uses the sensor you are troubleshooting. You can select the ‘Sensing’ category to filter example projects. For more information about EXP Blocks Example Projects and Templates, see this article. For more information about EXP Python Example Projects and Templates, see this article. For more information about EXP C++ Example Projects and Templates, see this article. Once open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor. In the example project shown here, the note indicates that the Bumper Switch is being used to detect when the switch is pressed so the robot can stop driving when it comes into contact with an object. Run the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this. You may want to try to create your own simplified project to apply what you have learned from the example project to your task. Use Other VEXcode EXP Tools There are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode EXP. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting. The Help Read the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report, and examples of how to use the command in a project. View this article to learn more about accessing Help in VEXcode EXP Blocks. View this article to learn more about accessing Help in VEXcode EXP Python. Printing Data You can also print data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project. Note that in a Blocks project, a separate {When started} hat block can be used to keep all of the printing commands organized in their own stack. VEXcode EXP Blocks VEXcode EXP Python VEXcode EXP C++ Select each image above to enlarge. Printing to the EXP Brain is helpful when you want to see the values changing as a VEXcode EXP project is running. This can help you determine what reported values from the sensor to use as parameters in your project. These print commands can be built into the VEXcode EXP project you have already created so you can see the sensor values change at specific times while the robot is moving. These example projects above show how to print values from the Inertial Sensor to the EXP Brain. The comments in each project explain the flow of the project and use of each command. VEXcode EXP Blocks VEXcode EXP Python VEXcode EXP C++ Select each image above to enlarge. Printing to the Print Console in VEXcode EXP is recommended for when you are running a VEXcode EXP project where the robot does NOT move. The EXP Brain must remain plugged in during the execution of the project in order to print to the Print Console. This is beneficial because you can read the values from the VEXcode EXP window rather than trying to read data from the Brain screen. These examples show a project printing data from the Distance Sensor to the Console in VEXcode EXP. For more information about using the Print Console in VEXcode EXP Blocks, see this article. For more information about using the Print Console in VEXcode EXP Python, see this article. Analyze and Apply Data Next, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and printing data to enable you to use the sensor effectively to accomplish your goal. You can also ask questions about your project to help you move forward. Think about things like: Are you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values. Are your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need? Are you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run. Is your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors. Are your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps. Are you running the most recent version of your project? Have you downloaded your updated project to the Brain? Make sure you redownload the project each time you make a change. Are you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter, or using a range of hue values, to see if that helps. Are you detecting an object within the sensor’s field of view? Remember that the field of view moves in conjunction with the movement of the robot. Are you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode EXP. If you are coding in blocks, is your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together. As you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot’s behaviors. You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode EXP. Troubleshooting VEX EXP Sensors In an ever-evolving educational landscape, staying informed and up-to-date with the latest advancements in teaching and learning methodologies is vital for educators. VEX Robotics, a leading innovator in educational technology, aims to provide top-notch resources and support to educators and learners through their VEX Professional Development Plus (PD+) platform. By attending VEX PD+ Live Sessions, educators can access invaluable insights, creative lesson ideas and implementations, and engage with a Professional Learning Community that enhances their teaching experience. In this article, we will delve into the reasons why attending a VEX PD+ Live Session is a valuable experience for both educators and students. What is a Live Session? Live Sessions are monthly, virtual, hour-long sessions led by PD+ Experts. A Live Session Series is organized around a central theme, like cross-curricular connections, math and robotics, engineering, makerspaces, or informal education. Sessions within a series are not cumulative, so you can attend one, two, or all of the unique sessions depending on your interest and availability. During a Live Session, the hosts will demonstrate unique implementations, lesson ideas, and teaching strategies that will help you go beyond the STEM Labs with your own VEX materials in your classroom. You will find ideas that you can take back to your classroom the next day, or some that you can work into your curriculum or practice over time. All Live Sessions are recorded, so you can view them later to revisit an idea, or share it with a colleague. Sessions also have a dedicated thread in the Community, where participants can continue the discussion from a session, offer ideas, ask questions, and help to shape future Session content in real time. What is the value of attending a Live Session? Exposure to Expertise VEX PD+ Live Sessions are led by the experienced and passionate educators of the VEX Robotics team. By attending these live sessions, teachers gain access to the expertise and knowledge of these accomplished professionals. Participants can learn from their experiences, insights, and perspectives, which can prove invaluable when applied to their own classrooms. Discovering Innovative Teaching Techniques VEX PD+ Live Sessions showcase unique robotics implementations, cross-curricular connections, and pedagogical strategies, which can help educators adapt to the constantly changing educational environment. By attending these Sessions, teachers can uncover new techniques and approaches that promote student engagement, enhance critical thinking, and foster a love for learning. This, in turn, can significantly improve student outcomes. Access to Resources and Tools VEX PD+ Live Sessions provide participants with access to resources and tools that can aid in effective lesson planning and delivery. Educators can learn new ways to integrate VEX Robotics into their teaching plans, whether by recreating an activity or lesson shown in a Live Session, or using the Live Session as inspiration to create their own lessons. VEXcode projects, Activities, and Session resources are shared via the Community thread after each Session, so participants can access these materials and make them their own. This can help teachers save time and effort while providing students with a rich, engaging learning experience. Opportunities for Networking and Collaboration Attending a VEX PD+ Live Session offers educators the chance to connect with like-minded professionals from around the world. This global network of educators can offer valuable support, collaboration opportunities, and the exchange of ideas and best practices. By tapping into this Community, teachers can expand their professional horizons, overcome challenges, and grow in their careers. Personalized Professional Development VEX PD+ Live Sessions cater to a wide range of educational topics and subjects, allowing teachers to select those that align with their personal interests and professional goals. This personalized approach to professional development empowers educators to continuously grow and refine their teaching practices, ultimately benefiting their students. The topics and content of each Live Session is directly inspired by conversations with VEX educators in the Community. PD+ educators contribute directly to help shape Live Sessions by asking questions and offering suggestions. Attending a VEX PD+ Live Session is an investment in teachers’ futures, offering a wealth of benefits for both educators and students. With access to expertise, innovative teaching techniques, resources, networking opportunities, and personalized professional development, educators can transform their classrooms and pave the way for student success. Log in to PD+ to learn more about Live Sessions. Not a PD+ Subscriber? Learn more about subscribing to PD+. Learn, Explore, Connect: The Value of Attending VEX PD+ Live Sessions When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps. The steps of this process are: Identify the problem Check hardware Check software Analyze and apply data Identify the Problem The first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor? If you need more information to determine which sensor may be the problem, read the article(s) below related to the sensors on your robot. VEX IQ (1st gen) Sensors: Using the VEX IQ (1st gen) Gyro Sensor Using the VEX IQ (1st gen) Distance Sensor Using the VEX IQ (1st gen) Color Sensor Using the VEX IQ Bumper Switch Using the VEX IQ Touch LED Once you have identified which sensor is causing the unintended behavior, you can move forward in the process. Check Hardware The second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor. Check Sensor Placement Begin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like another part of your robot? Ensure that the sensor has the space needed to operate as intended. As shown here, the Color Sensor has a clear line of vision to the object it is meant to detect. Check Sensor Connection Test the sensor’s functionality by looking at the data reported in the Device Menu on the VEX IQ (1st gen) Brain. This can help you validate that the sensor is plugged in and working. To access the Device Menu, follow the steps in this article. Once the Devices Screen is open, see if the sensor is reporting data. If not, ensure your sensors are plugged in correctly. When plugging in sensors, you should hear a snap when the sensor’s locking tab is fully engaged in a port. You can also try swapping out the sensor you are using with another to see if that resolves your issue. If you changed something with your sensor placement or sensor connection, test your project again to see if this resolved the issue. If your sensor placement and connection did not change, move onto the next step to continue the troubleshooting process. Check Software Once you have identified that the sensor is placed on and connected to the robot successfully, you can look to the VEXcode IQ project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor. If you apply any of these strategies to your VEXcode IQ project, test your project again to see if this resolved the issue. Check Firmware and Configuration Begin by ensuring that your IQ Brain’s firmware is up to date. See this article for information about how to update firmware on the VEX IQ (1st gen) Brain. Now that you are sure all devices are correctly connected to the Brain, check the Device Configuration in VEXcode IQ. Check to be sure all of the sensors are present in the configuration. Then, check to be sure each one is connected to the correct port. Change any incorrect device configurations. Run an Example Project Open an Example Project that uses the sensor you are troubleshooting. You can select the ‘Sensing’ category to filter example projects. For more information about IQ Blocks Example Projects and Templates, see this article. For more information about IQ C++ Example Projects and Templates, see this article. Once open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor. In the example project shown here, the note indicates that this project provides an example of how all the available Distance Sensor commands can be used with the robot. Run the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this. You may also want to try to create your own simplified project to apply what you have learned from the example project to your task. Use Other VEXcode IQ Tools There are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode IQ. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting. The Help Read the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report, and examples of how to use the command in a project. View this article to learn more about accessing Help in VEXcode IQ Blocks. View this article to learn more about accessing Help in VEXcode IQ C++. Printing Data You can also print data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project. Note that in a Blocks project, a separate {When started} hat block can be used to keep all of the printing commands organized in their own stack. VEXcode IQ Blocks VEXcode IQ C++ Select each image above to enlarge. Printing to the IQ Brain is helpful when you want to see the values changing as a VEXcode IQ project is running. This can help you determine what reported values from the sensor to use as parameters in your project. These print commands can be built into the VEXcode IQ project you have already created so you can see the sensor values change at specific times while the robot is moving. These example projects above show how to print values from the Distance Sensor to the IQ Brain. The comments in each project explain the flow of the project and use of each command. Using the Device Menu on the IQ Brain is helpful when you want to view sensor values while manually manipulating the robot. You can access the Device Menu without running a VEXcode IQ project and see the values detected by a sensor. Select the X button to access the Brain Settings, scroll down to Device Info, and press the checkmark button to open the Device Menu. While in the Device Menu, use the arrow buttons to select the device you want to view more information for. The Color Sensor is selected in this image. For more information about viewing Device info on the (1st gen) Brain, see this article. Analyze and Apply Data Next, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and printing data to enable you to use the sensor effectively to accomplish your goal. You can also ask questions about your project to help you move forward. Think about things like: Are you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values. Are your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need? Are you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run. Is your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors. Are your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps. Are you running the most recent version of your project? Have you downloaded your updated project to the Brain? Make sure you redownload the project each time you make a change. Are you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter. Are you detecting an object within the sensor’s field of view? Remember that the field of view moves in conjunction with the movement of the robot. Are you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode IQ. If you are coding in blocks, is your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together. As you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot’s behaviors. You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode IQ. Troubleshooting IQ (1st gen) Sensors When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps. The steps of this process are: Identify the problem Check hardware Check software Analyze and apply data Identify the Problem The first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor? If you need more information to determine which sensor may be the problem, read the article(s) below related to the sensors on your robot. VEX IQ (2nd gen) Sensors: Understanding Inertial Sensor Data from the VEX IQ (2nd gen) Brain Using the IQ Distance Sensor (2nd gen) Using the IQ Optical Sensor Using the VEX IQ Bumper Switch Using the VEX IQ Touch LED Once you have identified which sensor is causing the unintended behavior, you can move forward in the process. Check Hardware The second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor. Check Sensor Placement Begin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like another part of your robot? Ensure that the sensor has the space needed to operate as intended. As shown here, the Optical Sensor has a clear line of vision to the object it is meant to detect. Check Sensor Connection Test the sensor’s functionality by looking at the data reported in the Devices Screen on the VEX IQ (2nd gen) Brain. This can help you validate that the sensor is plugged in and working. To access the Devices Screen, follow the steps in this article. Once the Devices Screen is open, see if the sensor is reporting data. If not, ensure your sensors are plugged in correctly. When plugging in sensors, you should hear a snap when the sensor’s locking tab is fully engaged in a port. You can also try swapping out the sensor you are using with another to see if that resolves your issue. If you changed something with your sensor placement or sensor connection, test your project again to see if this resolved the issue. If your sensor placement and connection did not change, move onto the next step to continue the troubleshooting process. Check Software Once you have identified that the sensor is placed on and connected to the robot successfully, you can look to the VEXcode IQ project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor. If you apply any of these strategies to your VEXcode IQ project, test your project again to see if this resolved the issue. Check Firmware and Configuration Begin by ensuring that your IQ Brain’s firmware is up to date. See this article to learn more about updating firmware on the IQ (2nd gen) Brain in App-based VEXcode IQ. See this article to learn more about updating firmware on the IQ (2nd gen) Brain in Web-based VEXcode IQ. Now that you are sure all devices are correctly connected to the Brain, check the Device Configuration in VEXcode IQ. Check to be sure all of the sensors are present in the configuration. Then, check to be sure each one is connected to the correct port. Change any incorrect device configurations. Run an Example Project Open an Example Project that uses the sensor you are troubleshooting. You can select the ‘Sensing’ category to filter example projects. For more information about IQ Blocks Example Projects and Templates, see this article. For more information about IQ Python Example Projects and Templates, see this article. For more information about IQ C++ Example Projects and Templates, see this article. Once open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor. In the example project shown here, the note indicates that the Distance Sensor is being used to detect an object so that the robot can stop driving once the object is reached. Run the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this. You may want to try to create your own simplified project to apply what you have learned from the example project to your task. Use Other VEXcode IQ Tools There are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode IQ. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting. The Help Read the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report, and examples of how to use the command in a project. View this article to learn more about accessing Help in VEXcode IQ Blocks. View this article to learn more about accessing Help in VEXcode IQ Python. View this article to learn more about accessing Help in VEXcode IQ C++. Printing Data You can also print data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project. Note that in a Blocks project, a separate {When started} hat block can be used to keep all of the printing commands organized in their own stack. VEXcode IQ Blocks VEXcode IQ Python VEXcode IQ C++ Select each image above to enlarge. Printing to the IQ Brain is helpful when you want to see the values changing as a VEXcode IQ project is running. This can help you determine what reported values from the sensor to use as parameters in your project. These print commands can be built into the VEXcode IQ project you have already created so you can see the sensor values change at specific times while the robot is moving. These example projects above show how to print values from the Inertial Sensor to the IQ Brain. The comments in each project explain the flow of the project and use of each command. VEXcode IQ Blocks VEXcode IQ Python VEXcode IQ C++ Select each image above to enlarge. Printing to the Print Console in VEXcode IQ is recommended for when you are running a VEXcode IQ project where the robot does NOT move. The IQ Brain must remain plugged in during the execution of the project in order to print to the Print Console. This is beneficial because you can read the values from the VEXcode IQ window rather than trying to read data from the Brain screen. These examples show a project printing data from the Distance Sensor (2nd gen) to the Console in VEXcode IQ. For more information about using the Print Console in VEXcode IQ Blocks, see this article. For more information about using the Print Console in VEXcode IQ Python, see this article. Analyze and Apply Data Next, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and printing data to enable you to use the sensor effectively to accomplish your goal. You can also ask questions about your project to help you move forward. Think about things like: Are you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values. Are your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need? Are you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run. Is your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors. Are your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps. Are you running the most recent version of your project? Have you downloaded your updated project to the Brain? Make sure you redownload the project each time you make a change. Are you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter, or using a range of hue values, to see if that helps. Are you detecting an object within the sensor’s field of view? Remember that the field of view moves in conjunction with the movement of the robot. Are you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode IQ. If you are coding in blocks, is your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together. As you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot’s behaviors. You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode IQ. Troubleshooting IQ (2nd gen) Sensors When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps. The steps of this process are: Identify the problem Check hardware Check software Analyze and apply data Identify the Problem The first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor? If you need more information to determine which sensor may be the problem, read the article(s) below related to the sensors on your robot. VEX V5 Sensors: Using the V5 Distance Sensor Using the V5 GPS Sensor Using the V5 Inertial Sensor Using the V5 Optical Sensor Using the V5 Rotation Sensor Using the V5 3-Wire Bumper Switch v2 &amp; Limit Switch Using the V5 3-Wire LED Indicator Using the V5 3-Wire Light Sensor Using the V5 3-Wire Line Tracker Using the V5 3-Wire Potentiometer Once you have identified which sensor is causing the unintended behavior, you can move forward in the process. Check Hardware The second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor. Check Sensor Placement Begin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like another part of your robot? Ensure that the sensor has the space needed to operate as intended. As shown here, the Optical Sensor has a clear line of vision to the object it is meant to detect. Check Sensor Connection Test the sensor’s functionality by looking at the data reported in the Devices Screen on the VEX V5 Brain. This can help you validate that the sensor is plugged in and working. To access the Devices Screen, follow the steps in this article. Once the Devices Screen is open, see if the sensor is visible in the correct port location and reporting data. Here the Optical Sensor is detected in Smart Port 11. If the sensor is not reporting data, ensure your sensors are plugged in correctly. When plugging in sensors to a Smart Port, you should hear a snap when the sensor’s locking tab is fully engaged in a port. When plugging sensors into a 3-Wire Port, the cable should be fully inserted in the correct orientation with the white wire closest to the Brain screen. You can also try swapping out the sensor you are using with another to see if that resolves your issue. If you changed something with your sensor placement or sensor connection, test your project again to see if this resolved the issue. If your sensor placement and connection did not change, move onto the next step to continue the troubleshooting process. Check Software Once you have identified that the sensor is placed on and connected to the robot successfully, you can look to the VEXcode EXP project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor. If you apply any of these strategies to your VEXcode V5 project, test your project again to see if this resolved the issue. Check Firmware and Configuration Begin by ensuring that your EXP Brain’s firmware is up to date. See this article to learn more about updating firmware on the V5 Brain. Now that you are sure all devices are correctly connected to the Brain, check the Device Configuration in VEXcode V5. Check to be sure all of the sensors are present in the configuration. Then, check to be sure each one is connected to the correct port. Change any incorrect device configurations. Run an Example Project Open an Example Project that uses the sensor you are troubleshooting. You can select the ‘Sensing’ category to filter example projects. For more information about V5 Blocks Example Projects and Templates, see this article. For more information about V5 Python Example Projects and Templates, see this article. For more information about V5 C++ Example Projects and Templates, see this article. Once open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor. In the example project shown here, the note indicates that the state of the Bumper Switch or Limit Switch being pressed will be printed on the Brain screen. In this case True indicates pressed and False indicates not pressed. Run the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this. You may want to try to create your own simplified project to apply what you have learned from the example project to your task. Use Other VEXcode V5 Tools There are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode V5. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting. The Help Read the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report, and examples of how to use the command in a project. View this article to learn more about accessing Help in VEXcode V5 Blocks. View this article to learn more about accessing Help in VEXcode V5 Python. View this article to learn more about accessing Help in VEXcode V5 C++. Printing Data You can also print data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project. Note that in a Blocks project, a separate {When started} hat block can be used to keep all of the printing commands organized in their own stack. VEXcode V5 Blocks VEXcode V5 Python VEXcode V5 C++ Select each image above to enlarge. Printing to the EXP Brain is helpful when you want to see the values changing as a VEXcode V5 project is running. This can help you determine what reported values from the sensor to use as parameters in your project. These print commands can be built into the VEXcode V5 project you have already created so you can see the sensor values change at specific times while the robot is moving. These example projects above show how to print values from the Distance Sensor to the V5 Brain. The comments in each project explain the flow of the project and use of each command. VEXcode V5 Blocks VEXcode V5 Python VEXcode V5 C++ Select each image above to enlarge. Printing to the Print Console in VEXcode V5 is recommended for when you are running a VEXcode EXP project where the robot does NOT move. The V5 Brain must remain plugged in during the execution of the project in order to print to the Print Console. This is beneficial because you can read the values from the VEXcode V5 window rather than trying to read data from the Brain screen. These examples show a project printing data from the Rotation Sensor to the Console in VEXcode V5. For more information about using the Print Console in VEXcode V5 Blocks, see this article. Analyze and Apply Data Next, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and printing data to enable you to use the sensor effectively to accomplish your goal. You can also ask questions about your project to help you move forward. Think about things like: Are you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values. Are your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need? Are you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run. Is your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors. Are your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps. Are you running the most recent version of your project? Have you downloaded your updated project to the Brain? Make sure you redownload the project each time you make a change. Are you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter, or using a range of hue values, to see if that helps. Are you detecting an object within the sensor’s field of view? Remember that the field of view moves in conjunction with the movement of the robot. Are you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode V5. If you are coding in blocks, is your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together. As you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot’s behaviors. You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode V5. Troubleshooting VEX V5 Sensors Claws are usually attached to an end of an arm and are used for grasping an object. Motors are used to activate the claws. Motors are commonly used with a gear ratio or sprocket/chain system. Single-sided and double-sided claws may use an increase torque gear ratio and roller claws may use an increase speed gear ratio. Claws can be assembled using a variety of Beams, Gears, and the Other Products from the VEX IQ System. Rubber bands, Intake Flaps, and/or Traction Links can be used to increase the grip on claws. If time is available, several prototypes of claws should be developed during the design stage to assess which will be most effective for manipulating game pieces. Sometimes a simple claw design can be the most competitive. Some common types of claws are explained in this article. Please note that 3D build examples of these common types types of claws are included. The models can be manipulated, turned, and zoomed in and out in order to see multiple viewpoints. Single-sided Claw Single-sided claw or sometimes called a clamping claw is typically assembled with a fixed beam and a second beam attached to a motor/gear system. The side of the claw activated by the motor opens, and closes, clamping the game piece against the fixed beam. To understand how the Single-sided Claw functions and how it is built, please refer to the resources below. The Animation provides a demonstration of its working, while the 3D Build offers a detailed look at its construction. Double-sided Claw Double-sided claw (as seen on the Clawbot) will activate both sides of the claw. Custom assembled double-sided claws typically have an even number of gears setup to move the two sides of the claw. One side of the claw will be attached to the first gear in the assembly and the second side of the claw will be attached to the last gear in the assembly, allowing the claw to open and close as the gears are rotated. To understand how the Double-sided Claw functions and how it is built, please refer to the resources below. The Animation provides a demonstration of its working, while the 3D Build offers a detailed look at its construction. Roller Claws Roller claws are typically assembled using Wheels, Intake Belts, or Tank Treads. Roller claws function by spinning their rollers and having game pieces pulled into the claw. Then the rollers can be reversed, pushing them out. Roller claws can be assembled with one side of the claw having a fixed beam serving as a friction plate. The other side will have an active roller to roll the game piece in, along the fixed side. A roller claw can also be assembled with a roller on both sides of the claw. Typically roller claws are designed to spin faster than the robot can move forward. Roller claws allow game pieces to be picked up with less time aligning the robot, however, they require more time and planning to assemble. To understand how the Roller Claw functions and how it is built, please refer to the resources below. The Animation provides a demonstration of its working, while the 3D Build offers a detailed look at its construction. Building VEX IQ Claws Using the Controller can make it easier to drive and move your robot to complete a task. However, there are limitations to using the Drive program, and depending on your robot build or the task at hand, you may want different controls. Coding the Controller allows you to optimize the Controller to make it fit your robot and the task at hand better. There are several ways to code the Controller in VEXcode IQ. Each has its advantages and limitations, and some methods are better suited for certain situations depending on the desired outcome. This article will walk you through three different options for custom coding the Controller in VEXcode IQ. Each method will be described with its advantages, limitations, and an example use case to help guide you when choosing a method. For the purposes of this article, all code examples shown were created for the Clawbot. However, the same concepts could be applied to numerous other builds found on builds.vex.com, and custom builds. Option 1: Assigning Buttons in the Device Configuration This option is great when you are using a standard build, like a BaseBot or Clawbot, and want to get up and running quickly. This option lets you assign motors, a drivetrain, or motor groups to buttons on the Controller in the Device Configuration. For more information about how to assign buttons to the Controller in the Device Configuration, view this article. Summary of Option 1: Assigning Buttons in the Device Configuration Advantages Limitations Example Situation Quick setup with no coding needed Simplest method Easily adjustable Can assign individual motors, a standard drivetrain, and motor groups to buttons Button assignments are limited to the number of buttons on the Controller Drivetrain cannot exceed 4 motors or be customized (only a standard drive is supported, not an H drive, holonomic, or other custom drivetrain) Manipulating a standard build such as a BaseBot, Clawbot, or a simple modification of those standard builds. For example, a BaseBot with an intake attached to the front controlled by a motor group. Manipulating which buttons correspond to different behaviors on the robot quickly without much coding Option 2: Using a Forever Loop If you are using a custom build instead of a standard build, or want to be able to have more customization in your Controller, this option is a good one. Using a Forever loop is a great introduction to create custom code for your Controller. This option places all of the conditions for the Controller, and its associated buttons, in a Forever loop. This provides more flexibility, especially with custom build designs, but also requires some coding experience. One consideration when using this option however, is the length and complexity of your project. The more conditions that are added, the longer the code stack may become. This means that multiple blocks have to be executed in order, and when there are a lot of blocks, this can slow down project execution. Slower project execution may create a lag between pressing Controller buttons and seeing the robot behavior. The specific example shown below is one way that you can use a Forever loop with a custom design robot (such as a robot with a custom drivetrain) to drive the robot and manipulate the claw and arm in order to interact with objects. Download the "Option 2" VEXcode IQ (2nd generation) project file &gt; Note: If using a 1st Gen Clawbot the arm motor will need to be reversed in the Device Configuration to work as intended in the project above. Explanation of Option 2 Code. Code Piece Explanation A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to “hold” will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released. A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to “hold” will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released. A Forever loop is used in order to continuously check for which buttons are being pressed on the Controller. The [Set motor velocity] blocks are used to set the motor velocity to the current Controller’s position along the A and D axes. This is the equivalent to setting a car in drive. That doesn’t necessarily make the car move, it just sets it. Each joystick axis returns a value between -100 to +100, and returns a value of zero when centered. This then means that the joystick axes, when pushed, equate to -100% to 100%. The farther towards 100 or -100 the axes are pushed, the faster the motor will spin. The [Spin] block is then used to actually move the motor. This is the equivalent to pressing the gas on the car once the direction has been set. This allows each motor to be controlled by one of the four Controller axes. A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to “hold” will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released. The [If then else if then else] block is used to map certain behaviors to buttons being pressed or released on the Controller. In this section of code, the conditions set are if the E Up or E Down buttons are pressed. If so, certain behaviors will happen, such as the arm raising and lowering. There is also the else portion of the condition, if neither button is pressed, the arm is set to stop moving. Note the following section of code in the project for the Claw follows the same explanation. Summary of Option 2: Using a Forever Loop Advantages Limitations Example Situation Can accommodate custom builds, especially drivetrains with more than 4 motors Can assign multiple behaviors to a single button Can assign behaviors to different axes on the Controller (as opposed to the only options of Left Arcade, Right Arcade, Split Arcade, and Tank Drive in the Device Configuration) Requires some amount of coding knowledge (conditionals, loops, and knowledge of the buttons/joysticks on the Controller) Potential for slower project execution, or lag in button response time. Since all commands are contained within a single Forever loop, the code execution could run slowly depending on the conditions set and the length of the code. Using the Controller with a custom built robot, especially with a non-standard drivetrain When wanting to assign multiple behaviors to a single button. For example, when the F Up Button is pressed, the Claw can open, drive forward, and then close around an object. Option 3: Using Events If you want a lot of customization to your Controller, Using Events is the best option for you. One button press can trigger multiple robot behaviors, like pressing a button to open the claw, raise the arm, and drive forward for a set distance. Trying to code multiple behaviors per button within a Forever loop would cause the project execution to slow dramatically – using Events allows you to do this more effectively. This option uses Events to break up the project flow. This is similar to using a Forever loop, but allows for the code to be more organized, so that the button execution has a faster response time. Faster response time means you will not see a lag between pressing Controller buttons and seeing the robot behavior. This example shows the same behaviors as the previous project, but done using the Events instead of the Forever Loop. Download the "Option 3" VEXcode IQ (2nd generation) project file &gt; Note: if using a 1st Gen Clawbot the arm motor will need to be reversed in the Device Configuration to work as intended in the project above. Explanation of Option 3 Code. Code Piece Explanation A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to “hold” will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released. A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to “hold” will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released. {When controller axis} Event blocks are used to trigger certain behaviors when one of the four axes on the Controller are changed by using the joysticks. The [Set motor velocity] blocks are used to set the motor velocity to the current Controller’s position along the A and D axes. This is the equivalent to setting a car in drive. That doesn’t necessarily make the car move, it just sets it. Each joystick axis returns a value between -100 to +100, and returns a value of zero when centered. This then means that the joystick axes, when pushed, equate to -100% to 100%. The farther towards 100 or -100 the axes are pushed, the faster the motor will spin. The [Spin] block is then used to actually move the motor. This is the equivalent to pressing the gas on the car once the direction has been set. This allows each motor to be controlled by one of the four Controller axes. A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to “hold” will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released. {When controller axis} Event blocks are used to map certain behaviors to buttons being pressed or released on the Controller. In this section of code, the conditions set are if the E Up or E Down buttons are pressed. If so, certain behaviors will happen, such as the arm raising, lowering, or stopping. Note the last section of code in the project for the Claw follows the same explanation. Summary of Option 3: Using Events Advantages Limitations Example Situation Can accommodate custom builds, especially drivetrains with more than 4 motors Can assign multiple behaviors to a single button Can assign behaviors to different axes on the Controller (as opposed to the only options of Left Arcade, Right Arcade, Split Arcade, and Tank Drive in the Device Configuration) Faster code execution and thus, button responsiveness (as each condition is called on separately and not embedded in one single stack of code) Requires the most coding knowledge of the options (conditionals, loops, events, and knowledge of the buttons/joysticks on the Controller) If using a 1st generation VEX IQ Brain, having too many Events in a project may result in the project not running, due to the processing limitations of the Brain. Using the Controller with a custom built robot, especially with a non-standard drivetrain When wanting to assign multiple behaviors to a single button with no lag. For example, when the F Up Button is pressed, the Claw can open, drive forward, and then close around an object. Custom Controller Code in VEXcode IQ The following article will provide guidance on how to troubleshoot VEX V5 Smart Motors if you are experiencing one or more of the following issues: Motor is not spinning to the intended position The VEXcode V5 project is stopping unexpectedly in the middle of the project Motors are moving unexpectedly Problem: Motor Not Spinning to Intended Position If your motor is not spinning to the intended position, try the following steps to troubleshoot. Before editing your VEXcode V5 project, check that you have the correct gear cartridge selected in the device configuration. The default choice is the green 18:1 gear cartridge. For more information about configuring individual motors in VEXcode V5, view this article. Check the commands used in your project. [Spin to position] is used to spin a motor to a specific position. In contrast, the [Set position to] block sets the motor encoder’s position to the given value and will not move the motor. Ensure that you are using [Spin to position] rather than [Set position to] in your projects. Make sure that you know the correct degree position that you want the motor to move to. Any gear trains could impact the number of degrees needed to fully raise an arm or open a claw. See this article to learn more about gear ratios with VEX V5 Smart Motors. If you are unsure of how far to move a motor, use the device information available on the V5 Brain screen. To open the device information for a motor, first select 'Devices' from the V5 Brain screen. Then select the motor that you want to see more information for. NOTE: The motor must be plugged into the V5 Brain in order to be seen on the devices screen. Once opened, you will be able to see the degree and rotational position of the V5 Smart Motor selected. This will update in real time if you want to see how the values change as the motor spins. The device information reports the position of the motor in degrees and revolutions, so as you move a motor (like opening and closing a claw) the numbers will change. Use this testing to determine how many degrees or rotations are needed to close a claw, raise an arm, spin an intake, etc. Problem: VEXcode Project Getting Stuck Your project may seem to get stuck because the motor cannot reach its intended target position. You can adjust the position the motor is moving towards or can set a “timeout” for the motor. Motor timeouts allow you to set a time limit for the motor to reach its target position. If it has not met that position when time expires, the motor will stop trying to spin and the project will move to the next command. In this example, the motor timeout is set to 3 seconds. If the claw does not close to 360 degrees within 3 seconds, the motor will stop spinning at the 3 second mark then move to the next command and drive forward. Problem: Motors Not Holding a Position You may have an arm motor that moved down unexpectedly because it is being pulled by gravity or other forces. Using [Set motor stopping] allows you to control that movement of the arm after another command is completed. The [Set stopping to] command allows you to determine the behavior of the motor after it stops spinning. Using the ‘hold’ parameter will instruct the motor to fight gravity. ‘Hold’ causes the motor to come to an immediate stop and will return it to the stopped position if moved. Set the motors to ‘hold’ before other commands using the motors as shown in this custom Controller code example here. Troubleshooting VEX V5 Smart Motors The Training Courses within VEX Professional Development Plus (PD+) offer a unique solution to the challenges of traditional teacher PD, by giving teachers self-paced, hands-on, engaging training, with the opportunity for personalized learning and sustained support through the PD+ platform. You will need to have an active subscription to PD+ to enroll in PD+ Training Courses. For more information on activating or obtaining a PD+ subscription, see this article. What is in a PD+ Training Course? Each Training Course is focused on a specific topic or VEX platform, to give targeted course content for all VEX platforms and STEM pedagogy. The courses consist of themed Chapters broken up into smaller Lessons. These video-based Lessons weave together concept knowledge, teacher modeling, and hands-on learning with your own VEX Robotics materials, so that you can have the experience of participating in the kinds of lessons that you will end up teaching to your own students. The videos are intentionally designed to move slowly, and to build on one another, so that you can move through the course at a pace that best suits your needs and skill level. Training Courses designed for ‘Getting Started’ begin with things like charging a Battery and updating firmware, then progress to building and/or coding activities. For those who desire extra support and tips, the videos within the Get Started Training Courses offer high levels of scaffolding at the start, gradually removing it as the course progresses. Those who are more comfortable can move through the content at a faster pace, using the links to articles, videos, or build instructions included in each Lesson to guide or extend their learning. Features of a Training Course Hands-on learning with your VEX materials Training Courses allow you to use your own VEX Kits and materials to complete the activities within each Lesson. Like an in-person workshop, you will be able to build, code, and test your builds and projects to complete a variety of explorations. Getting Started courses are a great place to start if you are new to a VEX platform, and will walk you through a step-by-step process to get you ready to teach with VEX. Video-based lessons let you learn at your own pace Each Lesson in a Training Course centers on an instructor-led video, that will walk you through what you need to know to complete the Lesson activity. The on-demand nature of Training Course content means that you can watch videos, and complete Lesson activities anywhere, at any time, based on your own schedule and needs. Beside the video, Lesson descriptions offer a chapter and lesson level overview so you know what you will be learning about, as well as what materials you will need to complete the Lesson activity. Any resources that are mentioned in the video, or that can be used to extend your learning are also linked on the Lesson page. Formative assessment helps you monitor your progress Lessons also have built-in formative assessment, like Check Your Understanding questions or reflection prompts, so that you have a tool to monitor your own progress and learning. For instance, if an answer is unclear to you, you can go back and rewatch part of the video or use the additional resources linked on the page to learn more, before moving on to the next Lesson. Additional resources help you extend your professional learning Make the most of your professional learning by using the Training Courses in conjunction with other PD+ and VEX resources. Within Lessons, PD+ videos, articles, or educational resources will be linked so you have easy access to next steps, and the tools that can help you take your learning further. Additionally, each Training Course has an associated PD+ Community thread, enabling you to directly interact with other course participants and the PD+ experts leading the course at any time to ask questions, comment on course content, or spark a discussion based on your learning. Participating in a PD+ Training Course To begin a PD+ Training Course, select the course tile you wish to participate in. There is no 'enrollment' necessary, you can begin a course at any time by opening Chapter 1 Lesson 1 and completing the Lesson. You can then proceed to complete the course at your own pace. This flexibility enables you to engage with training when it is right for you, on your own schedule. Your progress within a Training Course will be saved, so that you can pick it back up at any time as best meets your needs. From the course main page, you can see an overview of Chapter topics and the Lessons contained within each. It is recommended to move through Lessons sequentially, as each Chapter will build on what was learned previously. View this article to learn more about how PD+ Training Courses exemplify effective professional development. Overview of PD+ Training Courses PD+ Live Sessions are one of the many valuable professional development offerings available to PD+ subscribers. They offer educators the ability to augment their teaching with VEX by engaging with learning that goes beyond the STEM Labs. You will need to have an active subscription to PD+ to enroll in PD+ Live Sessions. For more information on activating or obtaining a PD+ subscription, see this article. What is a Live Session? The Live Sessions are monthly, virtual, hour-long sessions led by PD+ Experts. The sessions are organized around a central theme, but are not cumulative, so you can attend one, two, or all of the unique sessions depending on your interest and availability. Features of PD+ Live Sessions Live Sessions span the VEX Continuum Live Sessions cover all VEX platforms across the continuum and are designed to be accessible for all levels of VEX teaching expertise. Whether you are new to teaching with VEX, or a veteran teacher, Live Sessions will offer new ideas to propel you on your STEM teaching journey. Interwoven within a Professional Learning Community Each Live Session has a PD+ Community thread that serves as the session communication hub. Session participants can post reflections, questions and ideas in this thread. The PD+ Experts leading the course will both participate in and derive session content from the discussions in this thread, in order to directly meet the interests and needs of those participating in each session. Thematic content to help you make the most of your students' learning PD+ Live Sessions cover a wide variety of subject matter that provides you with the insights and tools you need to take your students' learning experiences with VEX even further. Live Sessions include opportunities to build foundational background knowledge, like in Engineering 101, as well as interest-based ways to bring educational robotics into other areas of teaching, such as the Bring STEM to Life session. Use Live Session content to augment and adapt your lessons, learn practical teaching strategies to use in your classroom right away, and get inspired by other VEX educators in the session. Enrolling in a Live Session To enroll in a Live Session, select the 'Enroll in Series' button on the Live Session Tile. For more information about enrolling in a Live Session, see this article. The Community Discussion button on a Live Session tile will take you directly to the Community thread associated with that Session. Use this thread to read about session content, ask and answer questions from participants, engage in dialogue, suggest ideas for future sessions, and make the most of your Live Session learning. Participants are encouraged to engage with the Community often, as session hosts will use this thread to help shape Live Sessions. For each Session in a Series that you attend, you will receive a certificate to show your time spent in the session. This can be helpful when tracking your professional development hours for your school or organization. Overview of PD+ Live Sessions Sensors provide the ability for a robot to receive feedback from the environment. There are a variety of VEX IQ (2nd gen) sensors that can be used to obtain different types of input for the robot. The table below provides an overview of what each sensor can do, and examples of how it can be used in a project. VEX IQ (2nd gen) Sensor Comparison Table Sensor Function Example Uses Bumper Switch Tells the robot whether its bumper is pressed (sensor value of 1) or released (sensor value of 0). Detecting if the robot has bumped into an object, such as a maze wall or game object Triggering a robot action, when pressed or released Toggling to turn on or off motors when pressed Detecting other parts of the robot, such as an arm, when it presses in the bumper Touch LED Can detect capacitive touch, such as the touch of a finger. Can be set to display many colors. Triggering a robot action when touched Starting or pausing a program when touched Displaying different colors during different parts of a program, so it is easier to pinpoint code for troubleshooting Optical Sensor Detect the color of an object Detect an object Detect the brightness level of ambient light Measure the numerical Hue Value of an object White LEDs on the sensor can provide a consistent light source when detecting colors regardless of the surrounding light conditions. Coding the robot to interact specifically with an item of a certain color, such as sorting cubes by color Detecting whether an object is present, such as a wall or game object Triggering the robot to perform a behavior when the light level is at a certain brightness Understanding precisely how the Optical Sensor is detecting color in varied lighting conditions Following a line Detecting whether an object is present Distance Sensor Detects if there is an object in front of it Measures the distance between itself and an object Determine the relative size of an object Reports the velocity of an object Driving forward until the sensor detects that it is a certain distance away from a wall, then stopping driving. Driving forward a certain distance to pick up a game object Driving away from an object or surface until it has reached a specific distance Interacting with an object that is one size and avoiding interacting with an object that is another size, such as picking up only the small balls on a Field Determining the velocity of an approaching object and printing it on the Brain's screen Additional Sensor Information Note that the IQ (2nd gen) Brain has a built in Inertial Sensor rather than a Gyro Sensor. For detailed information on IQ (2nd gen) Sensors, see the following articles: Using the VEX IQ Bumper Switch Using the VEX IQ Touch LED Using the IQ Optical Sensor Using the IQ Distance Sensor (2nd gen) Understanding Inertial Sensor Data from the VEX IQ (2nd gen) Brain Overview of VEX IQ (2nd gen) Sensors Sensors provide the ability for a robot to receive feedback from the environment. There are a variety of VEX IQ (1st gen) sensors that can be used to obtain different types of input for the robot. The table below provides an overview of what each sensor can do, and examples of how it can be used in a project. VEX IQ (1st gen) Sensor Comparison Table Sensor Function Example Uses Bumper Switch Tells the robot whether its bumper is pressed (sensor value of 1) or released (sensor value of 0). Detecting if the robot has bumped into an object, such as a maze wall or game object Triggering a robot action, when pressed or released. Toggling to turn on or off motors when pressed. Detecting other parts of the robot, such as an arm, when it presses in the bumper. Touch LED Can detect capacitive touch, such as the touch of a finger. Can be set to display many colors. Triggering a robot action when touched Starting or pausing a program when touched Displaying different colors during different parts of a program, so it is easier to pinpoint code for troubleshooting. Color Sensor Uses reflected light to detect an object’s color hue value grayscale value brightness proximity. Interacting with an item of a certain color, such as when sorting objects by color. Determining the numerical hue value of a colored object. This data can be useful when troubleshooting the color sensor in varied lighting conditions. Understanding how the Sensor is detecting color in varied lighting conditions. Detecting a line Detecting whether an object is present Gyro Sensor Detects the robot's speed and rotation Maintaining straight driving Making accurate turns Distance Sensor Detects if there is an object in front of it Measures the distance between itself and an object Driving to a certain distance in front of an object, such as a wall or game object Driving forward until it detects that it is a certain distance away from a wall, then stopping. Driving to an object to pick it up. Driving away from an object or surface until it has reached a specific distance. Additional Sensor Information For detailed information on the sensors above, see the following articles: Using the VEX IQ Bumper Switch Using the VEX IQ Touch LED Using the VEX IQ (1st gen) Color Sensor Using the VEX IQ (1st gen) Gyro Sensor Using the VEX IQ (1st gen) Distance Sensor Overview of VEX IQ (1st gen) Sensors In order to charge your V5 Controller, follow along with the steps in this article. First, ensure you have all of the materials you need to get started: A micro-usb cable A V5 Controller A power source (such as a charging cube connected to an outlet or a computer) How to Charge a V5 Controller Connect the micro-usb cable to the Controller’s charge port located underneath the power button. The micro-usb cable must be connected to a power source to charge the Controller. The battery charge icon on the screen will indicate that the Charger is successfully charging. You can turn the Controller on and off by pressing and holding the power button. If the Controller is still actively charging, the battery indicator will fluctuate. Once the Controller is fully charged, the battery icon will be displayed as full. Charging the VEX V5 Controller When starting to program with VEXcode V5, Sensor blocks will not appear in the Toolbox until a sensor has been configured. Adding a Sensor To configure a sensor, select the Devices icon to open the Devices window. Select “Add a device.” Select a sensor. Note: Sensors include the Rotation Sensor, Distance Sensor, Vision Sensor, Optical Sensor, Inertial Sensor, and GPS Sensor. All sensors follow the same configuration process. For more information about configuring 3-wire devices, view this article. Select which port the sensor is attached to on the VEX V5 Brain. Ports that are already configured for other devices will be unavailable. Once the port has been selected, select “Done” to submit the device to the configuration or “Cancel” to return back to the Devices menu. Note: Selecting “Cancel” will undo any changes you have made to the device and will not be a part of the configuration. Changing a Sensor’s Port Number You can change the port number for the Sensor by selecting on the Sensor in the Devices window. Select a different port on the Port Selection screen and the port number will turn green. Then select Done to submit the change. Renaming a Sensor You can also rename the sensor by changing the name in the text box at the top of the Port Selection screen. If you select an invalid name, the text box will highlight red to indicate. Then select Done to submit the device changes to the configuration. If you change the name of a sensor that is already being used in your project, you will need to update the sensor name in the Block to the new name using the drop down. Deleting a Sensor Sensors can also be deleted by selecting the “Delete” option at the bottom of the Port Selection screen. Note: If you delete a sensor that is already being used in your project, your project will not work until you also delete the blocks that were using the deleted sensor. Configuring Sensors in VEXcode V5 Help explains what a command does so that you can figure out if it’s helpful for your project. Accessing Help from the Tool Box Select the Help icon on any command in the Tool Box. You will see a screen extend from the right with information on the command selected. Select any commands that you want to learn more about. Hide the Help window when finished by selecting the right arrow next to the Help icon. Accessing Help from the Workspace Right click or long press on any command in the Workspace. A context menu will appear. Select “Command Help.” You will see a screen extend from the right with information on the command selected. Hide the Help window when finished by selecting the right arrow next to the Help icon. Accessing Help in a VEXcode EXP Python Project While beginner programmers are more inclined to use the block-based interface, more advanced students may be interested in coding their robot using a text-based programming language, like Python. Historically this transition from blocks to text-based programming can feel to students like learning an entirely new language, where they cannot apply the logic they had previously learned using blocks.1 VEXcode VR Switch was developed in order to facilitate that transition from block-based to text-based programming. This article will cover how to use VEXcode VR Switch and walk you through a classroom scenario to explain and illustrate those features in context. Using Switch Blocks Switch incorporates familiar elements of block-based programming and integrates text-boxes where text commands can be typed. This allows the students to slowly transition to text as they learn the commands and syntax that goes along with Python. Switch provides students a natural bridge from Blocks into text-based coding. As students gain familiarity with the logic and sequencing of commands, they can begin to convert a project one block at a time. This allows students to continue working with the logic flow of a block-based program where they can physically see things like the wrapping of a loop around other blocks while also beginning to experiment with text commands themselves. Once the blocks are converted to Switch, students can easily change parameters and begin to understand the syntax of the text command. This section will walk you through a student's use of Switch to explain how you can use these blocks in a VEXcode VR project. Switch is available with a VEXcode VR Premium license. Learn more about VEXcode VR subscriptions here. Once you have your license, learn how to access Switch using the information in this article. Switch in the Classroom Austin is a student who has been coding with blocks for several years. While some students in the class are still new coders, Austin wants to learn more about Python and how to move into coding the VR robot using text. Ms. Hunter, the Computer Science teacher, noticed that Austin was ready for an additional challenge and introduced Switch to help scaffold Austin's learning and introduce text-based coding. Ms. Hunter demonstrated some of the basics like converting a block and opening the Help to learn more about the Switch Python command for each of the blocks. Today Ms. Hunter assigned the Coral Reef Cleanup activity to the class. She uses VEXcode VR for her coding classes because she knows that she can differentiate her instruction and reach students of varying coding levels with the same activities. Switch mode helps to facilitate that differentiation for students like Austin. In the Coral Reef Cleanup activity, the goal is to collect as much trash as possible before the battery runs out on the VR Robot. Understanding the challenge and how to code basic algorithms, Austin creates a VEXcode VR project that uses the Down Eye Sensor to detect the border of the Playground and drive in reverse to avoid harming the coral. Converting a Single Block to Switch Convert 1 block Now that Austin has a project he has tested and verified works, the next step is to convert a block to Switch in order to begin exploring Python. Blocks can be converted to Switch by long pressing or right clicking on the block, then selecting the ‘Convert to Switch Block’ option, as shown in the video here. Austin can now see that the [Drive for] block turned into the drive_for Python command. After converting, Austin runs the project to ensure it still works as intended. After the conversion, Austin wants to learn more about the drive_for command. By opening the Help of the [Drive for] block, Austin can make connections between the parameters from the block to the Python command. Using the Help to learn more about Switch Python Commands Open Help In order to look at the Switch Python Command information in the Help, Austin opens the Help window and selects the [Drive for] block, then scrolls to the bottom as shown in the video here. Ms. Hunter checked in and could see that Austin was learning more about the [Drive for] block. She challenged him to apply what was learned from converting a block and typing into a new block. She showed how to drag a Switch block in, and had Austin try to type a turn_for command into the block. Austin open the Help for the block and makes a note about the structure of the command. Typing in a Switch Block Add a block Knowing the Python command from checking the Help, Austin wants to type directly into a Switch block. Dragging a [Switch Stack] block from the Toolbox, Austin adds it above the [Turn for] block. Type in the block Then Austin uses the cursor to select the Switch block and begin typing the turn_for Python command as shown here. After typing in the new command and ensuring the parameters match the original block, the [Turn for] block can be deleted. Ms. Hunter comes around to check on Austin’s progress. She sees the Switch project and asks to see it run to ensure the commands are typed correctly. After verifying the project works, she demonstrates another feature - multi-line blocks. Copy and Paste The [Switch Stack] block can have multiple lines of code typed within it. Austin copies the turn_for text and pastes it into the block above as shown in the video here. Austin sees that by hitting ‘enter’ or ‘return’ on the keyboard, additional lines can be added to the block, and continues adding Python commands. Feeling like a master of Drivetrain commands in Python, Austin prints out a certificate and saves the project for next time. Converting Stacks to Switch Later in the school year, Ms. Hunter revisits the Coral Reef Cleanup activity and challenges students to either earn a higher score or use text-based coding. While Austin has been using Drivetrain commands in Switch blocks, this activity is an opportunity to learn more about the equivalent of ‘C’ blocks and Booleans in Python. Convert wrapper Austin long presses or right clicks on the [If then else] block and selects ‘Convert wrapper and contents to Switch Block.’ This converts the loop and the contents of the loop to a single Switch block. Note the indentation after the conversion is complete. Multiple commands in one Switch block must have the proper indentation to work as intended. Additional Switch Blocks While Austin has been exclusively using the [Switch Stack] block, there are additional Switch blocks available. Austin is ready to turn in an improved Coral Reef Cleanup project, but makes a plan with Ms. Hunter to try a new kind of Switch block like those listed below in the next class. Switch blocks follow the same shape conventions as other blocks. The table here shows the comparison between the block shape, its meaning, and the Switch blocks of the same type. Block Shape Description Block Examples Switch Examples Hat blocks Start a stack of blocks and are shaped to attach blocks below them. Stack blocks Perform main commands. They are shaped to attach above or below other stack blocks. Boolean blocks Return a condition as either true or false and fits inside any blocks with hexagonal (six-sided) inputs for other blocks. Reporter blocks Report values in the form of numbers and fits inside any blocks with oval inputs for other blocks. C blocks Loop the block(s) within them or check if a condition is true or false. They are shaped to attach stack blocks above, below, or inside them. Putting It All Together As Ms. Hunter watched Austin test out typing different Python commands in Switch blocks, she could see how Switch allowed her students to scaffold their own learning. Her students all had different coding experiences before beginning her class, and the challenges within VEXcode VR allow them to code at their own levels. Some students code solely in Blocks, some in Python, and others, like Austin, use Switch to transition into Python coding. Over the next few months, Austin moved to coding exclusively in Python, applying the learning from using Switch to make the transition from blocks to text much easier and smoother. VEXcode VR Switch allows teachers, like Ms. Hunter, to be facilitators of learning while students of all different coding levels complete the same challenge. All while the students, like Austin, feel empowered to try new methods of solving coding activities as they transition from blocks to text using VEXcode VR Switch. 1 Weintrop, David, and Uri Wilensky. "How block-based, text-based, and hybrid block/text modalities shape novice programming practices." International Journal of Child-Computer Interaction 17 (2018): 83-92 Using VEXcode VR Switch to Transition from Blocks to Text-Based Coding The Competition Template is an example project that has commands already included to communicate with the Field Control System during competitions, ensures commands are in compliance with field regulations, and aids in setting up projects in order to avoid complications and disqualification ("competition" refers to a VRC event using the official field control hardware). Open the Competition Template from the Examples Page Three sections of the template: Pre-autonomous, Autonomous Mode, and Driver Control Note: In order for your project to work at a competition, you must leave these functions in your project. Add commands where the comments indicate for each section. Use the pre_autonomous Function for any Setup The pre_autonomous function is used for any set-up your robot may need such as calibrating a Gyro, setting variables, or other device settings. These commands will run immediately when the project is started, before the autonomous portion of the match begins. Ensure that all commands are properly indented to that the guiding line is visible between the pre_autonomous and autonomous functions. Note: If no setup is needed, this function can remain empty. Autonomous The autonomous function is used for controlling your robot during the autonomous portion of a VRC match. Commands within this function will run when the match begins the Autonomous period. Ensure that all commands are properly indented to that the guiding line is visible between the pre_autonomous and autonomous functions. Note: If no setup is needed, this function can remain empty. User Control The user_control function is used for controlling your robot during the driver control portion of a VRC match. Commands within this function will run when the match begins the Driver Control period. Note: The while True loop is shown above so the robot will respond to input from the V5 Controller for the entirety of the match. Ensure that all commands are properly indented within the while True loop while coding the user control portion. Two guiding lines should be visible as shown here. One because the while True is within the user_control function. The other to ensure commands are within the while True loop. Using the Python Competition Template in VEXcode V5 Right-clicking in VEXcode V5 leads to many options to help you with your Python coding. Opening the Context Menu Right-clicking on a command or in the programming area will open the Context Menu Notice the shortcuts on the right side of the Context Menu. These will match with your keyboard depending on your operating system. Here a macOS device is being used. Changing Font Size Sometimes it can be hard to read the text commands because the font is too small. Use the 'Font Increase' option to make the commands in the workspace larger. To make the font smaller, use the 'Font Decrease' option. If you want to return to the default font size in the workspace, select the 'Font Reset' option Line Comments Selecting one of the 'Line Comment' options will allow you to change a command to a comment or vice versa. This is useful if you want to momentarily disable a command and test your project again. In the video shown here, each of the three line commands are used to edit what is a comment in the project. Cut, Copy, and Paste Using the options in the Context Menu or the same traditional keyboard shortcuts, you can cut, copy, and paste text in your project. This is useful when you want to move code from one location to another or edit large chunks of code in your project. Command Help and Changing Occurrences By right-clicking a command and then selecting 'Command Help' in the Context Menu, the Help information will appear. Changing occurrences is helpful when you want to bulk change a set of commands in your project. In the example shown here, the drive_for command was incorrectly typed, then copy and pasted 3 additional times. By right-clicking on the first command to open the Context Menu, you can select 'Change All Occurrences' and it will select all occurrences of that typed command. Then you can edit the commands as shown in this video. Note: Occurrences must exactly match. If one of the drive_for commands, in this video, was spelled correctly, it would not be highlighted. Command Pallet The Command Pallet opens all of the available commands and shortcuts that can be used in the workspace. Open the Command Pallet by right-clicking then selecting 'Command Pallet.' Using the Context Menu in VEXcode V5 Python Comments are usually added to projects to explain what a programmer wanted parts of the program to do. Comments are helpful when collaborating and troubleshooting, as they document what the code does without having to reread and comprehend many lines of code. Other programmers can read the comments to understand the code's functionality, and the original programmer can remember what their code does after revisiting a project. Python Comments All comments in Python start with a # (pound) symbol. Type any text, numbers, or symbols after the # (pound) sign. Comments typically describe the functionality of the code to help the programmer understand what a piece of code does. When the comment is complete, press the "Enter" or "Return" key to go to the next line. Comments only span one line. Using Comments in VEXcode V5 Python When creating Text projects, the syntax, spacing, indenting, and spelling in your code in very important to ensure that your project runs as intended. The color coding present in the Workspace in VEXcode EXP Python is an extra visual cue that you have entered your code into your project correctly. If there is an unrecognizable component while typing commands into the Workspace, it will remain black (like the user-created category). This can be a useful indicator as you are working to prevent frustration or extra troubleshooting later on. Use the cursor and keyboard to correct errors. As the components are recognized, they will be colorized correctly. The colorization of code follows the following conventions: Classes The individual device the command pertains to (i.e. drivetrain, sensor, brain) Commands The behavior within the command (i.e. drive, turn) Parameters Information about how the behavior executes (i.e. direction, distance) Structures Control the flow of the project (i.e. conditionals, loops) Values Numerical parameter assigned to the behavior (i.e. number of degrees of a turn) User Created User created variables and commands Comments The text following a # that will not effect the program. Understanding the Colorization of Code in VEXcode V5 Python There are many things that you can do and learn by navigating the VEX IQ (2nd gen) Brain screen. This article will walk you through each of the icons on the Brain screen and what they are used for, so that you can make use of the features on the Brain in your setting. Navigating the Brain Screen Press the Check button to power on the Brain. Once the Brain is powered on, the indicator light will show green, and the Home Screen will appear, as shown here. The buttons on the Brain are used to navigate the Brain screen. View this article to learn more about what each button does, and how they can be used to move through the options on the Brain screen. As you toggle to an option, its icon will have a black surround, and the name of the option will show on the bottom of the screen. In this image, the 'Drive' program is selected. Options on the Home Screen Drive Select the 'Drive' option to open the built-in Driver Control Program on the Brain. From the Drive menu, you can now run the Driver Control Program or access the settings within it, like Driver Configuration. View this article to learn more about running the Driver Control Program on the IQ (2nd gen) Brain. Programs Select the 'Programs' option to access programs that are downloaded to the Brain. From the Programs menu, you can now access projects that are downloaded to the Brain or toggle to an open project slot. View this article to learn more about running user programs on the IQ (2nd gen) Brain. Devices Select the 'Devices' option to access information about the devices that are currently connected to the Brain, like motors and sensors. From the Devices menu, you can now toggle to different connected devices to see what information they are reporting in real time. View this article to learn more about using the sensor dashboard in the devices window. Settings Select the 'Settings' option to open the various Brain settings. Continue reading to learn about each of the options within the Settings menu. Options in the Settings Menu Language The default language on the Brain screen is English. Use the Check button to toggle to different language options. When you have reached your desired language option, use the Right button to select it and move out of the Language selector. Link Select 'Link' to begin the process of wirelessly pairing your VEX IQ (2nd gen) Controller to your VEX IQ (2nd gen) Brain. View this article to learn more about the wireless pairing process and follow the steps in the article to connect your Controller and Brain. Calibrate Select 'Calibrate' to calibrate the VEX IQ (2nd gen) Controller that is connected to your VEX IQ (2nd gen) Brain. Calibrating the Controller ensures that the Brain is receiving accurate positions of the joysticks, and can be useful if you notice that the joysticks on the Controller are not moving the robot accurately. View this article to learn more about how to calibrate the Controller. System Info Select 'System Info' to view information about your VEX IQ (2nd gen) Brain. Here you can view identifying information about your VEX IQ (2nd gen) Brain, including the firmware version, Name, Team, and Brain ID number. Log Select 'Log' to view the Event Log of your VEX IQ (2nd gen) Brain. The Event Log can be used during troubleshooting to offer diagnostic information. The Event Log can includes information like project execution, download, or stop actions, as well as hardware events such as a device being disconnected from a port. Each Event is listed with a timestamp of the amount of time that has elapsed since the Brain has been powered on. The Event Log shows most recent events first, and you can toggle to the left to view older events in the log. Delete All Select 'Delete All' to delete all programs that are currently downloaded to the VEX IQ (2nd gen) Brain. You will then be prompted to confirm whether to delete all programs. Select the Check button to confirm and delete programs, or the X button to cancel and keep all programs downloaded on the Brain. Factory Reset Select 'Factory Reset' to reset the VEX IQ (2nd gen) Brain to its original factory settings. All information, like language selections or downloaded programs, will be deleted and the Brain will be restored to its factory settings. Guide to the VEX IQ Brain Screen (2nd gen) Users can open a project in VEXcode EXP in different ways. Opening an Existing Project Open an existing project by selecting “Open” from the File menu. Then, use the Windows interface to navigate and open your existing project. Opening a Recent Project Open the list of recent projects from the File menu. Then, select a recent project to open it. Opening an Example Open the example project chooser from the File menu. Then, select an example project to open it. Note: When opening a project, a prompt will appear asking to save if the current project has not been saved yet. Opening a VEXcode EXP Blocks Project on Windows Users can open a project in VEXcode EXP in different ways. Opening an Existing Project Open an existing project by selecting “Open” from the File menu. Then, use the macOS interface to navigate and open your existing project. Opening a Recent Project Open the list of recent projects from the File menu. Then, select a recent project to open it. Opening an Example Open the example project chooser from the File menu. Then, select an example project to open it. Note: When opening a project, a prompt will appear asking to save if the current project has not been saved yet. Opening a VEXcode EXP Blocks Project on macOS Users can open a project in VEXcode EXP in different ways. Opening an Existing Project Open an existing project by selecting “Open” from the File menu. Then, use the Android interface to navigate and open your existing project. Opening a Recent Project Open the list of recent projects from the File menu. Then, select a recent project to open it. Opening an Example Open the example project chooser from the File menu. Then, select an example project to open it. Note: When opening a project, a prompt will appear asking to save if the current project has not been saved yet. Opening a VEXcode EXP Blocks Project on an Android This article is for those who currently are using the Cortex System and are upgrading / considering upgrading to the VEX EXP System. The purpose of this article is to cover what contents from Cortex can be used with the VEX EXP System. Structure Compatibility EXP Structure (metal pieces, wheels, gears) was designed with backwards compatibility in mind. This means, the standard used to create Cortex Structure is the same standard used for EXP. Therefore, the pitch (or distance between holes on structural components) is the same, so Cortex Structure can be aligned and fastened to EXP structure. The EXP System utilizes Star Drive Screws and Low Profile Nuts, so you can fasten your builds more securely than before with rivets, although you can still use whatever you are most comfortable with. When upgrading from Cortex to EXP, hardware, gears, and wheels will work with one another. Electronics Compatibility The root of EXP is based upon the new VEX EXP Brain. Detailed below, it replaces the VEX ARM Cortex-based Microcontroller. This more powerful Brain allows you to control not only the new sensors and motors found in the EXP Kit, but also most of the Cortex Sensors you are familiar with so you will not have to give up anything when deciding to upgrade. EXP Brain Specifications Improved Robot 10 Smart Ports on the Brain to communicate with a multitude of motors and sensors 8 3-Wire Ports to communicate with both new EXP Sensors and Cortex Sensors (more information below) 1.7” Color Screen with buttons allowing for a total of 8 stored user projects Built in Inertial Sensor, 6-axis Gyro/Accelerometer Built-in Bluetooth Radio paired with the EXP Controller (more information below) Micro SD Card for Datalogging and Storage The Brain also has a real-time motor and sensor dashboard and built-in configurable drive program, allowing for immediate troubleshooting and demonstration opportunities without the need for coding Programmed in VEXcode Blocks, C++, and Python (more information below) The EXP Brain replaces the VEX ARM Cortex-based Microcontroller, allowing for a lower barrier of entry to the VEX system with how simple it is to use. The EXP Brain is able to power and control mostly all of the sensors and motors you have been using and are used to from Cortex. If you are wanting to upgrade to EXP but have reservations that you will lose valuable electronics from Cortex, EXP was specifically designed to still support past electronics, while at the same time introducing much more powerful sensors and motors. Cortex Electronics The following list is of 3-Wire Sensors and Motors from the Cortex System and whether or not they are compatible with the EXP Brain and EXP System. Simply plug your compatible 3-Wire electronics the same way you have been doing with Cortex into the EXP Brain, and watch it come to life. Name Product Image Part Number EXP Compatibility Limit Switch 276-2174 Compatible Bumper Switch 276-2159 Compatible Optical Shaft Encoder 276-2156 Compatible Ultrasonic Range Finder 276-2155 Compatible Line Tracker 276-2154 Compatible Light Sensor 276-2158 Compatible Potentiometer V1&amp;V2 276-2216 276-7417 Compatible LED Indicator 276-2176 Compatible Gyro 276-2333 Compatible Motor 393 276-2177 Compatible* Servo 276-2162 Compatible* Accelerometer 276-2332 Compatible VEX ARM Cortex-based Microcontroller 276-2194 Not Compatible replaced with the VEX EXP Brain VEXnet Joystick 276-2192 Not Compatible replaced with the VEX EXP Controller VEXnet Key 2.0 276-3245 Not Compatible replaced with the EXP Brain and Controller Built-In Radio 7.2V Robot Battery NiMH 2000mAh 276-1491 Not Compatible replaced with the VEX EXP Battery VEX Flashlight 276-2210 Not Compatible replaced with the V5 Optical Sensor VEX LCD Display 276-2273 Not Compatible replaced with the EXP Brain's Built-In LCD Programming Hardware Kit 276-2186 Not Compatible replaced with the USB-C Cable *Power output from the 393 Motors and Servos will be reduced. They will be most useful for non-drivetrain functions. Mostly all of the Cortex motors and sensors you find value in are compatible with the EXP Brain and System. Once plugged into the EXP Brain, you can either take control of them through the Brain’s Device menu, allowing you to see and control all electronics currently plugged into the Brain, or by using VEXcode EXP. VEXcode EXP replaces ROBOTC, and allows you to configure and code your electronics using either Blocks, C++, or Python. View this section from the VEX Library for more information on VEXcode EXP. EXP Electronics In addition to all of the Cortex electronics that you may continue to use, there are also a number of improved EXP Motors and Sensors. The Smart Ports provide more complex sensing which results in more accurate data when compared to the Cortex Sensors. The following list includes the Motors and Sensors gained when upgrading to the base EXP Kit. The V5 Optical Sensor is a combination of the following sensors: Ambient light sensor Color Sensor Proximity Sensor The Optical Sensor has a white LED to assist color detection in low light conditions, and can function as a flashlight. The Optical Sensor uses a Smart Port and allows for real-time sensor feedback through the usage of the EXP Brain’s Sensor Dashboard. The V5 Distance Sensor uses a pulse of classroom-safe laser light to measure the distance from the front of the sensor to an object. It can also: detect an object and determine the relative size of the object as small, medium, or large used to calculate a robot’s approach speed of the robot/sensor as it moves toward an object The Distance Sensor uses a Smart Port and allows for real-time sensor feedback through the usage of the EXP Brain’s Sensor Dashboard. The Bumper Switch v2 is a single digital switch with a spring-loaded bumper which can be pushed in to change the state of the switch. This switch requires only a light touch to activate and is one of the 3-Wire series of sensors. The Bumper Switch uses a 3-Wire Port and allows for real-time sensor feedback through the usage of the EXP Brain’s Sensor Dashboard. The V5 Smart Motor (5.5W) delivers 5.5W of power and precision, designed to perform reliably, effectively, and most importantly, safely in the classroom. The V5 Smart Motor (5.5W) uses a Smart Port and allows for real-time sensor feedback through the usage of the EXP Brain’s Sensor Dashboard. With an integrated encoder measuring at 960ticks/rev, users can control the motor’s direction, speed, acceleration, position, and torque limit all without the use of a Motor Controller 29. Upgrading from Cortex to EXP Example projects and templates are a great resource if you are just getting started with VEXcode EXP and want to explore different robot behaviors. Example projects and templates also allow you to observe how different blocks in VEXcode EXP are used. Using Blocks Example Projects To open an example project, select the File menu and choose Open Examples. Icons for many different example projects will be shown. Each icon represents a different project and are colored according to the block categories. The Filter bar can be used to quickly find a specific type of example. To open any example, select one from the menu. Blocks for the example base project will populate in the workspace. These blocks and their parameters can be changed or removed. Additional blocks can be added to modify the example project. Save and download the example to try it on your robot. Using Templates There is also a special type of example called a template. Templates have a special icon and are used to create a blank project with a preset device configuration. If using a standard robot build, like the Clawbot, a template can be used to quickly get started with a new project. Notes in Blocks Example Projects and Templates Each example project and template contains a note in the workspace. In an example project, the note provides a short summary for what the project does and also lists the device configuration. In a template, the description notes which devices are listed in the configuration. Notes can be used to document certain information in a project. For more information on notes, view the Using Notes in a Blocks Project in VEXcode EXP article. Using VEXcode EXP Blocks Example Projects and Templates Here are some basic ways to manage notes in projects. Adding a Note to a Project Right-click or long-press anywhere in the Workspace and select 'Add Note.' Then, type any text, numbers, or symbols into the note. Press the “Enter” or “Return” key to write a multi-line note. Select anywhere in the Workspace when the note is complete. Collapsing Notes You can collapse a note by selecting the down arrow in the top margin. This will collapse the note. Moving Notes Around You can move a note by selecting the top margin and dragging it around. Deleting Notes You can delete any note by selecting the 'X' located at the top right of the note. You can also delete a note by right-clicking or long-pressing on it and selecting 'Delete.' Duplicating Notes You can duplicate a note by right-clicking or long-pressing on it and selecting 'Duplicate.' Using Notes in a Blocks Project in VEXcode EXP Movements like CSforAll are seeking to address issues of equity and inclusion within the field of Computer Science. CSTA Voice recently published an article highlighting how students with disabilities can be successful in computer science classes, when they are considered and supported. “When students are given appropriate support and accessible tools/curricula, they can succeed. Yet, inclusion of students with disabilities is often hampered by low expectations, as well as pedagogical and accessibility barriers which keep them from being fully included.” - Andrew Bennett, Maya Israel, Ph.D., &amp; Johnny Delgado, Improving Accessibility in the Classroom With the UDL4CS Interactive Table The article goes on to describe CSTA’s new UDL4CS Interactive Table resource, and how it can be used to support accessibility in computer science classrooms. Much of the focus is on shaping curriculum and teaching to give options for students to learn, present, and access knowledge in multiple ways. They outline “five steps for successful implementation” as a guide for how to make the most of classroom experiences to support all learners. Establish Clear Goals Anticipate learner needs and barriers Measurable outcomes and assessment plan Instructional Experience Reflect The design of STEM Labs across the continuum aligns well with these steps and the accessibility considerations recommended for supporting diverse learners. This table shows some of the ways that STEM Labs support this implementation process. Universal Design for Learning (UDL) Step Engage-Play-Share STEM LabsVEX 123 &amp;VEX GO Learn-Practice-Compete STEM LabsVEX IQ (2nd gen) &amp; VEX EXP 1. Establish Clear Goals Each activity within the Play section of a STEM Lab begins with an animation and explanation that helps teachers and students to establish clear goals about the activity. The images, animations, and words give options to access the goal and communicate about it to be sure that all students know what is expected of them. IQ 2nd generation and EXP STEM Labs begin with goal setting with the class. After viewing an animation of the end game for the Lab and discussing it, students and teachers work together to establish and document clear learning goals. The videos, animations, discussions and engineering notebook documentation offer options for students to access and communicate about their goals. 2. Anticipate learner needs and barriers The Engage section of a STEM Lab offers a way to access students’ prior knowledge and bridge any knowledge gaps in a low stakes way, in preparation for the Lab’s activities. The Background Information in each Unit allows teachers to anticipate knowledge gaps that they and their students may have, with descriptive information they can share with students to eliminate barriers. The Learn section of IQ and EXP STEM Labs include student-facing captioned, teaching videos designed to help students access prior knowledge about a certain topic, and bridge any knowledge gaps in a low stakes way. Each video has an accompanying handout to offer additional options for accessing the material, as well as formative assessment questions. Students can review and revisit this content at any time to take the time they need for successful learning. 3. Measurable outcomes and assessment plan The Goals, Standards and Summary sections of the STEM Labs offer information about how standards are reached through the Lab’s activities. In addition, Objectives are offered with the corresponding Lab activity and assessment to be sure that students are reaching the learning objective during the Lab. Students share their learning in different ways, from discussion to project sharing, offering options for expression to support diverse learners. The Compete section of each Lesson offers students a hands-on, collaborative way to show their learning through playing the Lesson’s mini-game. Students know what they are trying to accomplish, and teachers can easily see if they have met the Lesson goals by seeing how their robot behaves in the game. The engineering notebook serves as documentation of learning, and gives students multimedia options for how to represent their learning process in a way that is comfortable to them. 4. Instructional Experience The Play sections of a STEM Lab offer step by step instructions for how to model an activity for students, as well as prompts to support differentiation and facilitate group work. Students work in groups to complete Lab activities, allowing them to work at their own pace, and teachers are given information for how to support learners with extra practice, challenges, and more. Additionally, the Pacing Guide in the Unit Overview gives specific ways to adapt and extend a Unit to best meet all students’ learning needs. The Practice and Compete cycles of each Lesson and the culminating game allow students to work in groups and tailor their competition strategy to the component of the game or learning goal that they choose. This voice and choice in how to represent their learning through game play offers many options for student engagement, from documenting in the engineering notebook to iterating on the robot build or code to scouting and guiding team collaboration and more. The emphasis on collaboration and teamwork throughout the Lab promotes inclusion of all students, and tactical strategies to support inclusive conversations are given in Lab instructions as well. 5. Reflect The Mid-Play Break and Share sections of the Lab are designed to give students reflection opportunities to check in and express their learning and questions in a variety of ways. Discussion prompts align with demonstrations and project sharing offering students options for how to express their learning in the way that best meets their needs. The Debrief Conversation at the end of the Unit offers students an opportunity to share their learning with the teacher in response to the learning goals and discussion prompts. Students can engage in this meeting in a way that meets their needs – from multimedia presentations to written responses to showing and telling about their engineering notebook. Inclusivity in Computer Science and STEM is an important issue and one that we can work towards incrementally with each lesson we teach. At VEX, we are working to help make that incremental improvement possible and attainable for all teachers, as well as all students. Want to learn more about the CSTA resources mentioned here? Visit CSTA and become a member. References Bennett, Andrew, et al. “Improving Accessibility in the Classroom with the UDL4CS Interactive Table.” Computer Science Teachers Association, CSTA Voice, 13 Jan. 2023, https://csteachers.org/Stories/improving-accessibility-in-the-classroom-with-the-udl4cs-interactive-table. Using Curriculum Design to Improve Accessibility in STEM and Computer Science Introduction This article is intended for those who are just starting out with the VEX V5 Workcell and may be new to building, more specifically, building with metal. The purpose of this article is to familiarize you with the tools provided in the Workcell Kit in order to begin building. The Workcell uses two main tools; the Open End Wrench and the T15/T8 Star Drive Key or T15/T8 Star Screwdriver. View the video below as well as the information included in the rest of this article to learn more about these tools and their uses. V5 Workcell Tool Uses Open End Wrench The purpose of the Open End Wrench is to hold a nut or standoff in place while a screw is being secured to it. By holding the nut or standoff in place with the wrench, it will allow the screw to be securely fastened to your build. With the V5 Workcell, the smaller end of the wrench is used to hold: #8-32 Standoffs Length of the standoff does not matter. The larger end of the wrench is used to hold: #8-32 Nylock Nuts T15 Star Drive Key / T15 Star Screwdriver The purpose of the T15 Star Drive Key (pictured first) as well as the T15 Star Screwdriver (pictured second) is to drive all the #8-32 Star Drive Screws. This is done by using the unique star drive shape of the key driving the imprinted #8-32 Star Drive Screw. For more information and a demonstration on securing screws to nuts, view this article from the VEX Library. T8 Star Drive Key / T8 Star Screwdriver The purpose of the T8 Star Drive Key (pictured first) as well as the T8 Star Screwdriver (pictured second) is to drive all the #8-32 Star Drive Set Screws. These star drive set screws are the smaller screws located in Star Drive Shaft Collars. For more information and a demonstration on securing screws to nuts, view this article from the VEX Library. Understanding and Using V5 Workcell Tools Introduction This article is intended for those who are just starting out in VEX V5 and may be new to building, more specifically, building with metal. The purpose of this article is to familiarize you with the tools provided in the V5 Kit in order to begin building. The V5 Kits contain two main tools; the Open End Wrench and the T15/T8 Star Drive Key or T15/T8 Star Screwdriver. View the video below as well as the information included in the rest of this article to learn more about these tools and their uses. V5 Tool Uses Open End Wrench The purpose of the Open End Wrench is to hold a nut or standoff in place while a screw is being secured to it. By holding the nut or standoff in place with the wrench, it will allow the screw to be securely fastened to your build. In V5, the smaller end of the wrench is used to hold: #8-32 Low Profile Nuts #8-32 Standoffs Length of the standoff does not matter. The larger end of the wrench is used to hold: #8-32 Nylock Nuts #8-32 Hex Nuts #8-32 Keps Nuts T15 Star Drive Key / T15 Star Screwdriver The purpose of the T15 Star Drive Key (pictured first) as well as the T15 Star Screwdriver (pictured second) is to drive all the #8-32 Star Drive Screws. This is done by using the unique star drive shape of the key driving the imprinted #8-32 Star Drive Screw. For more information and a demonstration on securing screws to nuts, view this article from the VEX Library. T8 Star Drive Key / T8 Star Screwdriver The purpose of the T8 Star Drive Key (pictured first) as well as the T8 Star Screwdriver (pictured second) is to drive all the #8-32 Star Drive Set Screws. These star drive set screws are the smaller screws located in Universal Joints and Star Drive Shaft Collars. For more information and a demonstration on securing screws to nuts, view this article from the VEX Library. Understanding and Using V5 Tools Introduction This article is intended for those who are just starting out in VEX EXP and may be new to building, more specifically, building with metal. The purpose of this article is to familiarize you with the tools provided in the EXP Kit in order to begin building. The EXP Kit contains two main tools; the Open End Wrench and the T15 Star Drive Key. View the video below as well as the information included in the rest of this article to learn more about these tools and their uses. Note: the video above shows references to V5, but the same concepts can be applied to EXP. EXP Tool Uses Open End Wrench The purpose of the Open End Wrench is to hold a nut or standoff in place while a screw is being secured to it. By holding the nut or standoff in place with the wrench, it will allow the screw to be securely fastened to your build. In EXP, only the smaller end is used to hold: #8-32 Low Profile Nuts This is the only nut in the EXP system. #8-32 Standoffs Length of the standoff does not matter. T15 Star Drive Key The purpose of the T15 Star Drive Key is to drive all screws in your EXP Kit, the #8-32 Star Drive Screw. This is done by using the unique star drive shape of the key driving the imprinted #8-32 Star Drive Screw. For more information and a demonstration on securing screws to nuts, view this article from the VEX Library. Understanding and Using EXP Tools In seeking to prepare students for lives and careers in the 21st Century, a focus on STEM and Computer Science (CS) has emerged, and is gaining attention.1 As such, more and more teachers are being asked to incorporate STEM and CS into their classrooms, or to become full time STEM teachers. However, many of these teachers do not have a STEM or CS background to draw from, so are looking for more varied and ongoing professional development opportunities to support their teaching practice.2 The traditional professional development model of in-person, one-off training sessions has value, but comes with many drawbacks. Finding the time to attend, the budget to pay for the training, possible travel, substitute teachers, and the inherent limitations that come with a group session, like scope and a lack of differentiation and personalization, can make the in-person model less effective for teachers. Additionally, a one-time session does not necessarily support teachers when they need professional development or support, and may not offer the content that they find relevant at the time of the PD. VEX Professional Development Plus (PD+) was developed to combat these ongoing issues with traditional teacher PD. What is PD+? PD+ is a multifaceted online professional learning platform that offers all teachers opportunities for professional growth and learning through continual and sustained training, mentoring, and support. The beauty of PD+ is that it is not just one thing, or a one-off experience – it is a combination of resources that you can curate for yourself, to help you on your STEM teaching journey. What’s in a PD+ Training Course? The Training Courses within VEX Professional Development Plus (PD+) offer a unique solution to the challenges of traditional teacher PD, by giving teachers self-paced, hands-on, engaging training, with the opportunity for personalized learning and sustained support through the PD+ platform. Each Training Course is focused on a specific topic or VEX platform, to give targeted course content for all VEX platforms and STEM pedagogy. The courses consist of themed Chapters broken up into smaller Lessons. These video-based Lessons weave together concept knowledge, teacher modeling, and hands-on learning with your own VEX Robotics materials, so that you can have the experience of participating in the STEM Lab lessons that you will end up teaching to your own students. For instance, in the Building with VEX GO Training Course, teachers learn about following build instructions, then actually follow along with a VEX Expert to construct various builds with their VEX GO Kit. They then use these builds in a classroom investigation together, modeled by the Expert in the video, to see how the builds connect to curricular concepts. The videos are intentionally designed to move slowly, and to build on one another, so that you can move through the course at a pace that best suits your needs and skill level. Training Courses designed for ‘Getting Started’ begin with things like charging a Battery and updating firmware, then progress to building and/or coding activities. For those who desire extra support and tips, the videos within the Get Started Training Courses offer high levels of scaffolding at the start, gradually removing it as the course progresses. Those who are more comfortable can move through the content at a faster pace, using the links to articles, videos, or build instructions included in each Lesson to guide or extend their learning. Lessons contain formative assessment questions, and links to the PD+ Community so you can ask questions about the content and engage with other VEX Educators and the Experts teaching the course for individualized learning and interactions. The variety, breadth, and depth of the Training Courses allows teachers to pursue interest-driven professional learning, a hallmark of effective teacher PD.3 PD+ Training Courses Exemplify Effective Professional Development PD+ Training Courses, in tandem with the larger PD+ environment, satisfy the hallmarks of successful PD, providing a significant advantage over traditional, stand-alone, in-person professional development sessions. Effective professional development should be content focused, incorporate active learning, support collaboration, model effective practice, provide coaching and expert support, offer opportunities for feedback and reflection, and be of sustained duration.4 ✔ Content focused Courses guide you through the concepts and skills needed to build, code, and teach STEM and CS with VEX Robotics confidently. ✔ Incorporates active learning Use your Kit to create VEX builds and carry out classroom investigations and activities as you participate in the same hands-on lessons you will be teaching. ✔ Supports collaboration Ask questions and get feedback from others in the PD+ Community to collaborate with educators and VEX Experts around the world. Extend your learning by joining in PD+ Live Sessions for in-person virtual learning. ✔ Uses modeling of effective practice Successful teaching and learning strategies are modeled in each video, showing how to effectively teach lessons from VEX STEM Labs and Activities. Practical classroom tips for implementing each lesson are included, as well as discussion prompts you can use to spark engaging classroom dialogue around STEM topics. ✔ Provides coaching and expert support The VEX Experts teaching the course are experienced educators, and bring years of classroom teaching experience to each Lesson within the course. Interact directly with the Experts via PD+, for individualized training and support on your STEM teaching journey. ✔ Offers opportunities for feedback and reflection Check your understanding with formative assessment questions in each Lesson. Reflect on what you’ve learned as you implement course activities with your students. ✔ Is of sustained duration PD+ provides a wealth of opportunities for ongoing, timely, personalized professional development, and is always growing. Watch additional videos, view STEM Labs, read articles, contribute to PD+ Community threads, and attend the annual VEX Robotics Educators Conference to continue pursuing your STEM teaching goals. Leverage Your Experience as a Learner in Your Teaching Practice Training Courses allow educators to experience STEM Labs Lessons and Activities just as their students will in the classroom, providing insight into the student learning experience, promoting the practice of teachers learning alongside their students. “Many of the qualities of a constructivist learning environment are either aligned or the same as the qualities of effective online professional development. Examples of these qualities include collaboration and interactivity which are important for being able to build knowledge by manipulating learning materials and resources.” - Joshua C. Elliot, The Evolution from Traditional to Online Professional Development: A Review Courses are not simply product training, but set you up for success by integrating hands-on learning experiences with best practices for teaching and learning. The self-paced nature also gives the freedom and flexibility to spend more or less time in a Chapter as you see fit, aligning personal classroom needs and professional development interests with course content. “ “I find myself logging into PD+ daily as a way to connect, learn and share ideas about robotics in a way that no other platform has available for teachers. I even got to meet all of my new PD+ colleagues in person at the conference! During my planning time, I watch videos that are geared to developing my understanding of robotics. VEX PD+ is the best tool, and one I use on a daily basis to strengthen my STEM teaching skills.” – Anna V. Blake, K-5 Elementary Technology Integrator The responsive nature of PD+ and the comprehensive layers of support it provides makes PD+ Training Courses unique in their ability to offer educators the elements of highly effective professional development in a sustainable way. Virtual professional development, like PD+ Training Courses, enables flexible sustained learning with follow-up, which can be more effective than a single workshop.6 Rather than attending yet another in-person session that is too soon forgotten, engage with PD+ to develop STEM teaching expertise, raise students' achievement, and take control of your professional learning journey. Features of a Training Course Hands-on learning with your VEX materials Training Courses allow you to use your own VEX Kits and materials to complete the activities within each Lesson. Like an in-person workshop, you will be able to build, code, and test your builds and projects to complete a variety of explorations. Getting Started courses are a great place to start if you are new to a VEX platform, and will walk you through a step-by-step process to get you ready to teach with VEX. Video-based lessons let you learn at your own pace Each Lesson in a Training Course centers on an instructor-led video, that will walk you through what you need to know to complete the Lesson activity. The on-demand nature of Training Course content means that you can watch videos, and complete Lesson activities anywhere, at any time, based on your own schedule and needs. Beside the video, Lesson descriptions offer a chapter and lesson level overview so you know what you will be learning about, as well as what materials you will need to complete the Lesson activity. Any resources that are mentioned in the video, or that can be used to extend your learning are also linked on the Lesson page. Formative assessment helps you monitor your progress Lessons also have built-in formative assessment, like Check Your Understanding questions or reflection prompts, so that you have a tool to monitor your own progress and learning. For instance, if an answer is unclear to you, you can go back and rewatch part of the video or use the additional resources linked on the page to learn more, before moving on to the next Lesson. Additional resources help you extend your professional learning Make the most of your professional learning by using the Training Courses in conjunction with other PD+ and VEX resources. Within Lessons, PD+ videos, articles, or educational resources will be linked so you have easy access to next steps, and the tools that can help you take your learning further. Additionally, each Training Course has an associated PD+ Community thread, enabling you to directly interact with other course participants and the PD+ experts leading the course at any time to ask questions, comment on course content, or spark a discussion based on your learning. Participating in a PD+ Training Course To begin a PD+ Training Course, select the course tile you wish to participate in. There is no 'enrollment' necessary, you can begin a course at any time by opening Chapter 1 Lesson 1 and completing the Lesson. You can then proceed to complete the course at your own pace. This flexibility enables you to engage with training when it is right for you, on your own schedule. Your progress within a Training Course will be saved, so that you can pick it back up at any time as best meets your needs. From the course main page, you can see an overview of Chapter topics and the Lessons contained within each. It is recommended to move through Lessons sequentially, as each Chapter will build on what was learned previously. To learn more about the content of any of the PD+ Training Courses, view the course overview: Introduction to VEX 123 Introduction to Building with VEX GO Introduction to VEX IQ (2nd gen) Introduction to VEX EXP Introduction to VEX V5 Engineering Design Process with Sensors Using 123 and GO in Your Regular Education Classrooms Cross Curricular Connections with VEXcode VR Hands On, Minds On with Claire Cameron Planning and Running a VEX Camp 1 National Science Teachers Association. “Position Statement: STEM Education Teaching and Learning.” NSTA.org https://www.nsta.org/nstas-official-positions/stem-education-teaching-and-learning. Accessed 7 February 2023. 2 Harter, Lauren and Jason McKenna. “Fostering Communities of Practice: Insights from an Online Educational Robotics Professional Development Pilot.” IARIA: The Fourteenth International Conference on Mobile, Hybrid, and Online Learning, 2022, https://www.thinkmind.org/index.php?view=article&amp;articleid=elml_2022_2_20_58006. Accessed 6 February 2023. 3 Elliott, Joshua C. "The evolution from traditional to online professional development: A review." Journal of Digital Learning in Teacher Education 33.3 (2017): 114-125. 4 Darling-Hammond, Linda, Maria E. Hyler, and Madelyn Gardner. "Effective teacher professional development." (2017). 5 Elliott, Joshua C. "The evolution from traditional to online professional development: A review." Journal of Digital Learning in Teacher Education 33.3 (2017): 114-125. 6 Brasili, Alexandria, and Sue Allen. "Beyond the Webinar: Dynamic Online STEM Professional Development." Afterschool Matters 29 (2019): 9-16. Effective Professional Development with VEX Professional Development Plus Training Courses If you have attempted to update your VEX EXP Controller’s firmware and your controller power indicator LED is fast red blinking, this means that part of the firmware on your controller is failing to load and needs to be repaired to continue using your controller. Please note that there are two different microcontrollers inside of the VEX EXP Controller with firmware - each firmware will produce the same flashing red indication, but the connection process to fix the issue is different. Each process will be outlined in this article. VEXcode EXP Web-Based Windows Users: You MUST install a driver before attempting this process. View this article for the steps to install the driver before continuing. The firmware recovery process can only be done via a wired connection. This means that you must use a computer such as a Windows, Mac, or Chromebook. Tablets utilize a bluetooth connection and are not supported at this time. Your VEX EXP Controller must be hard-wired connected to your device via a USB-C cable. App-Based VEXcode EXP - Repairing Both Controller Firmwares Open up app-based VEXcode EXP installed on your computer. Make sure you have no other VEX applications open. Connect your VEX EXP Controller to your computer via a USB-C cable. You will be prompted to update your Controller’s firmware. Select “Update” and wait for the update process to complete. If the update fails or there is no progress in the update process for more than 2 minutes, please disconnect your controller, wait 10 seconds and then reconnect, before trying step 3 again. If you are still unable to repair the controller, please remove the battery from the controller for at least 30 seconds before trying again. In some configurations, local computer restrictions may prevent the firmware update. Please try the web-based version if all steps to this point have been unsuccessful. The web-based steps are outlined below. Web-Based VEXcode EXP - Repairing Primary Controller Firmware Connect your VEX EXP Controller to your computer via a USB-C cable. Open the web-based version of VEXcode EXP at codeexp.vex.com. Select the controller icon in the top menu, and then “Recover (Fast Red Blinking).” Follow the prompts in VEXcode EXP and when asked to connect to the controller you should see “VEX EXP Controller FW Upgrade” as an option.If you do not see “VEX EXP Controller FW Upgrade” as an option, try the following: Try reconnecting your Controller to the device. Ensure no other VEX applications are open. If on Windows, ensure you have the Driver installed. Try the “Repairing the Secondary Firmware” section outlined below. Continue the update process by following all the prompts in VEXcode EXP. Web-Based VEXcode EXP - Repairing Secondary Controller Firmware Connect your VEX EXP Controller to your computer via a USB-C cable. Open the web-based version of VEXcode EXP at codeexp.vex.com. Select the controller icon in the top menu, and then “Recover (Fast Red Blinking).” Follow the on screen prompts to complete the update process. If you do not see the controller and you have already tried the process for the main firmware repair, please remove the battery from the controller for at least 30 seconds before trying again with the primary firmware repair process. If you are still having issues, please send feedback via the “Feedback” button in VEXcode EXP. Ensure to include diagnostic data and an email address. More information about sending feedback is included in this article. Then, please contact VEX support. VEX EXP Controller Firmware Recovery The 123 Playspace in VEXcode VR includes several interactive Activities. This article includes information about what interactive Activities are and describes the additional features the VR 123 Robot has for some of the Activities. Information for using these Activities successfully is also provided. What Kinds of Activities are Available in the VR 123 Playspace ? There are two types of Activities available in the VR 123 Playspace, "flat" Activities and interactive Activities. View this article to learn more about choosing an Activity in the 123 Playspace. A "flat" Activity is one in which the elements on the Field are fixed, and appear 2-dimensional. The robot can navigate over and around the elements, but can't push them or move them in any way. interactive-activity.mp4"&gt; An interactive Activity is one in which some or all of the elements on the Field can be moved by the 123 Robot. flat-interactive-elements"&gt; Some interactive Activities combine both flat and interactive elements. In these activities, the robot will be able to move some elements on the Field, and others will be flat and able to be driven over. Elements that can be moved have a more 3D appearance, while those that cannot appear flat. The Choose Location Button can be used to change the starting position of the VR 123 Robot on the Field. This can make an Interactive Activity more or less challenging, depending on the location chosen. View this article to learn more about setting the starting position of the VR 123 Robot. Features of the VR 123 Robot in Interactive Activities The VR Robot may have additional features in the interactive Activities. In some interactive Activities, there is a green plow attachment at the front of the Robot that can be used to push elements on the Playground. When the VR 123 Robot turns, the plow attachment may inadvertently push game elements out of the way, so keep that in mind while coding. In other interactive Activities, the VR 123 Robot may have different Art Ring attachments for added engagement. To learn more about the VR 123 Playspace, see this section of articles. Using Interactive Activities in the VR 123 Playspace It takes just a few steps to connect a VEX EXP Brain to App-Based VEXcode EXP on your Android tablet. Before beginning, make sure that you know the name of your Brain. For help naming your Brain see this article. To Connect a VEX EXP Brain Insert the battery into the EXP Brain. Turn on the EXP Brain by pressing the checkmark button. Launch app-based VEXcode EXP. You may get a message asking you to allow the app to access your files. Select 'Allow'. Select the Brain button. Select 'Connect.' A list of available EXP Brains will appear. Select the name of the Brain you want to connect to. Once a Brain is chosen, select the 'Connect' button.' A 4-digit Radio Connection Code will appear on the Brain's screen Type the code into the prompt in the app and select 'submit'. The Brain icon will turn green to indicate it is connected. If you select the Brain icon, it will indicate the name of the Brain is it connected to. To Disconnect a VEX EXP Brain Select ‘Disconnect’ to disconnect your EXP Brain from VEXcode EXP. Connection Issues If you are still having trouble connecting your VEX EXP Brain to VEXcode EXP, see this article to troubleshoot your Bluetooth connection on Android. If you are unable to resolve your issue, please contact VEX support. Connecting with App-based VEXcode EXP to an EXP Brain - Android As you are implementing IQ STEM Labs in your setting, students will naturally complete their builds at different times. If you want your class to work through STEM Labs together at a relatively uniform pace, it is important to think ahead about how you will engage those students who finish building earlier than others. This article provides several suggestions for meaningful learning activities they can complete as the rest of the group finishes building. Have Early Finishers Help Other Students One way early finishers can put their skills to good use and learn while doing so, is by providing building help to students who need it. It's important to work together with your class to establish guidelines for student helpers, so they are able to provide assistance that helps their classmates to learn without stepping in too much and doing the building for them. Have a class discussion about what giving and receiving help from peers should look like and sound like, and create the guidelines together. Here are some suggestions for the kinds of guidelines that you could establish with your class. Helpers Help only those who ask for help. Help students in the order on the sign-up sheet. Ask questions to be sure what kind of help is needed. Provide suggestions for solving building problems, but do not touch the robot/build. Students who need help Ask a helper for help first, before asking the teacher. Be patient and wait your turn. Be specific about the building problem you need assistance with. Try the suggestions provided by the helpers, and ask more questions if needed. Do not expect helpers to do the building for you! Creating a protocol for classroom helpers ahead of time will ensure that both the helpers and those who are being helped are challenged and engaged. Helpers will need to think carefully about how to communicate effectively, and those who are being helped will still need to use the information provided to engage in the productive struggle required when solving problems. Additionally, creating a sign-up sheet to establish in what order students will be helped can help prevent disagreements about whose turn it is. Once you have established your classroom helping protocols, have students role play the helping procedure to practice it before they actually begin building in your classroom. This will go a long way towards helping students to employ the procedure successfully. Have Students Complete IQ Activities There are a number of IQ Activities students can do independently using pieces remaining in the IQ Kit after a build is completed. Students can be directed to choose from a list of these Activities, or can be assigned specific Activities depending on current learning goals. All of the activities to the left can be done with limited Kit contents. Wheel It! Tallest Tower Challenge Sammy Rescue Wheel and Axle Lunar Rover Build a Wagon Pinball Wizard Signs Build It, Make It, Engineer It Covered Maze Box Ramp Racers Pendulum Time Hang Out Additionally, you can assign students an IQ Activity that gives them an opportunity to test their build. For example, if your students have built the BaseBot, they can do the Drive Forward and Reverse Activity. If they have built the Clawbot, they can try The Claw. For more information about using VEX IQ Activities in the classroom, see this article. Have Students Practice Coding Using VEXcode VR If students are already familiar with VEXcode VR, students can practice coding a Virtual Robot as they wait for others to finish building. Assign students a VEXcode VR Activity that is appropriate for their level of experience for them to complete independently or in pairs. For more information about VEXcode VR, see this group of articles. Create a list of Additional Building Extension Activities Students Can Always Do Another strategy for engaging students who are finished is to create a list of activities students can refer to and choose from when they are finished building. Engaging students in the creation of this list will make the list more relevant to your students and in your particular setting. Some ideas you may want to include in your are: Document your Robot build in your Engineering Notebook. Organize your IQ Kit or help others organize theirs. Write a list of tips and tricks for completing a build successfully. Sketch and label an idea for adding a feature to your build in your Engineering Notebook. This list can be dynamic, as you and your students can add to it whenever a new idea arises. Engaging Students Who Complete an IQ Build Quickly The VR 123 Robot in the 123 Playspace in VEXcode VR is equipped with a VR Pen. This enables you to add color, lines, and drawings to your projects on the Field. You can adjust the Pen width and color, move the Pen up and down to draw, and fill in areas on the Field with color using the Pen. Setting the Pen Width The [Set pen width] block is used to adjust the width of the line drawn by the Pen on the VR 123 Robot. The default width is set to thin. The line can be made more fine by setting the Pen width to 'extra thin', or wider by setting the Pen width to 'medium', 'wide', or 'extra wide'. This image shows an example of the difference in line thickness from 'extra thin' (at the bottom) to 'extra wide' (at the top). Moving the Pen To draw with the Pen on the VR 123 Robot, you must move the Pen 'down' onto the Field using the [Move Pen] block. The default setting for the Pen is 'up', or not drawing on the Field. This image shows an example where the Pen was moved between 'down' and 'up' to draw lines and leave a space between. Moving the Pen 'down' then immediately 'up' will result in drawing a spot on the Field, as shown in this image. Setting the Pen Color There are two ways to adjust the Pen color. The first is using the [Set Pen color] block to set the Pen color to one of four preset basic colors – black, red, green, or blue. The default color for the Pen on the VR 123 Robot is black. You can also use the [Set Pen color] block with color sliders to set the Pen color to any shade. Move the sliders within the block to adjust the red, green, and blue values. Move the opacity slider to adjust how solid or translucent your color appears on the Field. As the sliders are moved, the color in the [Set Pen color] block will change to reflect that color combination. Continue moving the sliders until your desired color is created. In this example, the [Set Pen color] block is used to draw a multi-colored square. Filling an Area with Color You can also use the Pen on the VR 123 Robot to color in an area on the Field, using the [Fill area with color] block. Move the sliders within the block to adjust the red, green, and blue values. Move the opacity slider to adjust how solid or translucent your color appears on the Field. Continue moving the sliders until your desired color is created. In this example, the [Fill area with color] block was used to color the Field. You can also use this feature to color in shapes that you have drawn with the Pen. Using the Pen on the VR 123 Robot The 123 Playspace in VEXcode VR has several features that enable you to select Activities, set up the Field and VR 123 Robot, change the view of the Field, and more. Using the Activities Button Upon opening the 123 Playspace, you will be prompted to select an Activity from the dialog box. Once an Activity is open in the 123 Playspace, you can select a new Activity at any time using the Activities button. This will open the Activity dialogue box. Use the scroll bar to scroll to the Activity you would like to use. Select the Activity button to open the Activity. View this article to learn more about choosing an Activity in the 123 Playspace. Using the Start and Stop Buttons The Start and Stop buttons in the Playground Window can be used to start and stop your project. Once an Activity is open in the 123 Playspace, you can select a new Activity at any time using the Activities button. Select the Start button to begin running your project on the Field. Note: When a project is started, both the Activities button and the Choose Location button become inactive. You cannot change starting location or Activity while a project is running. When the project is started, the Stop button will appear. Select the Stop button to stop the project at any time. Using the Reset Button The Reset button is used to reset the Field at any time. Select the Reset button to return the Field, VR 123 Robot, and timer to their original positions. In order to restart a project from the beginning, you must select the Reset button prior to restarting the project. Once the Reset button is pressed, the Field will return to its original state. Understanding the Playground Timer The Playground Timer in the 123 Playspace shows the time elapsed while a project is running. The Playground Timer will not begin until the project is started. The Playground Timer will stop running when the Stop button is selected. Note: The Playground Timer will continue to run until the Stop button is selected, even if the project has ended and the VR 123 Robot has stopped moving. Using the Choose Location Button You can change the starting position of the VR 123 Robot on the Field with the Choose Location button. Select the Choose Location button to open the starting position dialogue box. Follow the prompts in the dialogue box to select your desired starting location and direction, then select 'Confirm'. View this article to learn more about setting the starting position of the VR 123 Robot. Understanding the Camera View Button There are two camera views of the 123 Playspace. Use the Camera View button the switch between them. The default camera view is a top down view of the Field. Select the Camera View button to change to the angled view. When viewing the angled camera, the Camera View button will change to the top down camera. Select the Camera View button to return to the top down default view. Using the Expand Button When using the Custom Activity, the Expand button will appear to enable you to customize the Field within the 123 Playspace. Select the Expand button to customize the Field by uploading an image to the Field, or to download a Field or Playground image, or clear the Field. View this article to learn more about using these Custom Activity features. Using the Playground Window in the 123 Playspace Each Activity that opens in the 123 Playspace has a default starting position for the VR 123 Robot. You can change the starting position on the Field and the direction the VR 123 Robot is facing with the Choose Location button. Using the Choose Location Button From the Playground Window, you can select the 'Choose Location' button at any time to set the starting position of the VR 123 Robot on the Field. The Choose Location dialogue box will open, asking you where you want the robot to start. Setting the VR 123 Robot's Location Within the dialogue box, select the square on the Field in which you would like the VR 123 Robot to be placed. Once selected, the VR 123 Robot will appear in the new location. To select a different location, select a different square on the Field. Changing the Starting Direction of the VR 123 Robot Use the left and right arrow buttons in the dialogue box to change the direction the VR 123 Robot is facing. Each press of the button will rotate the robot 90 degrees in the selected direction. Continue pressing the buttons until the VR 123 Robot faces your desired direction. The VR 123 Robot will turn and face the direction selected. Once you have the VR 123 Robot in the desired starting location and direction, select the Confirm button to return to the 123 Playspace. The VR 123 Robot is now ready to be coded from its new starting position! You can change the starting position at any time using the Choose Location button. Setting the Starting Position of the VR 123 Robot When using the 123 Playspace in VEXcode VR, there are several Activities that set the Field layout for the VR 123 Robot to run on. This article will walk you through how to choose an Activity, and how to use the Custom Activity feature. Choosing an Activity upon opening the 123 Playspace When you open the 123 Playspace in VEXcode VR, the 'Select an Activity' dialog box will appear when the playground is opened. Use the scroll bar to scroll through the Activities listed. Each Activity title corresponds to a preset themed 123 Field with elements that the 123 Robot can drive on or around. To choose an Activity, select the button of the Activity title. The Activity will then open in the 123 Playspace. The VR 123 Robot and Field elements will be in default starting positions. View this article to learn more about setting the starting position of the VR 123 Robot. Choosing a New Activity While Using the 123 Playspace You can change the Activity at any time while using the 123 Playspace. Select the Activities button, as shown in the image to the right. This will open the 'Select an Activity' dialog box. Use the scroll bar to scroll through the Activities. Select an Activity button to choose a new Activity. The new Activity will then open in the 123 Playspace. The VR 123 Robot and Field elements will be in default starting positions. View this article to learn more about setting the starting position of the VR 123 Robot. Using the Custom Activity Field The 'Custom' Activity will open a blank Field in the 123 Playspace, that you can use as is, or customize by uploading your own image or Field setup. The Custom Field opens as a blank Field by default. You can code the VR 123 Robot to drive on this Field and use it as is. Uploading a Custom Image to the Field To customize the Field, select the Expand button, as shown in the image on the right. Select the 'Upload' button to upload a custom image to the Field. The Upload button is used to upload custom .png and .jpg image files that are less than 1 megabyte. A window will open to select your image file. Note this image shows the window opened on a Mac. This may look different depending on your device. The image file will then open on the Field. Other Features in the Custom Activity Field Expand Button The Download Field Button The 'Download Field' button will download the image of the VR 123 Field as a .png without the VR 123 Robot or any of the other Playground buttons. Here is an example of a downloaded Field image from the Activity above The Download Playground Button The 'Download Playground' button will download the entire Playground Window image as a .png image file. This includes: The image of the VR 123 Field The current position of the VR Robot The timer of the project being run All of the Playground Window buttons Here is an example of the downloaded Playground image from the Playground above. The Clear Button The 'Clear' button will clear the Field of any current uploaded images, and return it to the empty VR 123 Field when selected. You can then upload a new image to the Field, use it as is, or select a new Activity. Choosing an Activity in the 123 Playspace This article describes the features and characteristics of the VEX EXP—part number 280-7126—including the Status Button, LED indicators, charge time, and the built-in energy-saving shutdown mode. LED Status Display The VEX EXP Robot Battery Li-ion 2,500 mAh has 4 green LEDs, which form a bar graph that displays the level of charge of the Battery. During normal operation, these LEDs are off to conserve energy. The Battery also has a Status Button. Pressing and releasing the Status Button causes the LEDs to turn on for about 4 seconds to indicate the current charge level of the Battery. View this animation to see how to check the Battery level using the Battery’s LEDs. EXP Low Battery.mp4"&gt; The following table shows the charge level thresholds and the corresponding LEDs: Charge Level LEDs on When Status Button Pressed 0-24% 1 25-49% 1, 2 50-74% 1, 2, 3 75-100% 1, 2, 3, 4 When the Battery is charging, the highest-most LED (i.e., the LED farthest from the Status Button) will blink, indicating the charge level. For example, when the charge level is between 50-74%, LEDs 1 and 2 will be solidly on, and LED 3 will be blinking (LED 4 will be off). If the charge level is between 0 and 24%, then LED 1 will be blinking, and the other LEDs will be off. View this animation to see how the Battery’s LEDs indicate the current charge level during charging. EXP Charging Battery.mp4"&gt; Charge Times Charging from 0% to 100% normally takes just over 2 hours. When a new Battery is charged for the first time, or when a Battery has been stored over long periods of time (a few months), it may take longer to charge the Battery. This is because the Battery has to pre-charge at a slower rate to protect the cells. After this initial charge, the Battery charge rate will return to normal.For fastest charge times, using the recommended USB cable and charger is recommended. The charger needs to be able to supply at least 2.4 A of current. Chargers with a current rating of 0.5 A or more will still charge the Battery but will cause charge times to increase accordingly. Energy-saving Shutdown Mode If the Battery has not been used for several hours, it will go into shutdown mode to save energy. This means the Battery’s output will be disabled, and it will not supply power to the Brain. Pressing the Status Button will wake up the Battery. This means if the Battery has been inserted into the Brain and the Brain will not turn on, you must first press the Status Button on the Battery. This wakes up the Battery. Then press the power Button (Check Button) on the Brain to turn it on. Plugging the Battery into a charger will also automatically wake up the Battery. Technical Characteristics of the Battery Characteristic EXP Li-ion Battery Nominal capacity 2500 mAh Approximate charge time 2.5 hours Max continuous current* 15 A *Current is also temperature-limited, so max continuous current may be lower in very hot environments. Using the VEX EXP Robot Battery This article describes the features and characteristics of the VEX IQ Robot Battery (2nd generation)—part number 228-7045—including the Status Button, LED indicators, charge time, and the built-in energy-saving shutdown mode. LED Status Display The VEX IQ Robot Battery Li-ion 2,000 mAh (2nd generation) has 4 green LEDs, which form a bar graph that displays the level of charge of the Battery. During normal operation, these LEDs are off to conserve energy. The Battery also has a Status Button. Pressing and releasing the Status Button causes the LEDs to turn on for about 4 seconds to indicate the current charge level of the Battery. View this animation to see how to check the Battery level using the Battery’s LEDs. IQ Low Battery.mp4"&gt; The following table shows the charge level thresholds and the corresponding LEDs: Charge Level LEDs on When Status Button Pressed 0-24% 1 25-49% 1, 2 50-74% 1, 2, 3 75-100% 1, 2, 3, 4 When the Battery is charging, the highest-most LED (i.e., the LED farthest from the Status Button) will blink, indicating the charge level. For example, when the charge level is between 50-74%, LEDs 1 and 2 will be solidly on, and LED 3 will be blinking (LED 4 will be off). If the charge level is between 0 and 24%, then LED 1 will be blinking, and the other LEDs will be off. View this animation to see how the Battery’s LEDs indicate the current charge level during charging. IQ Charging Battery.mp4"&gt; Charge Times Charging from 0% to 100% normally takes just over 2 hours. When a new Battery is charged for the first time, or when a Battery has been stored over long periods of time (a few months), it may take longer to charge the Battery. This is because the Battery has to pre-charge at a slower rate to protect the cells. After this initial charge, the Battery charge rate will return to normal. For fastest charge times, using the recommended USB cable and charger is recommended. The charger needs to be able to supply at least 2.4 A of current. Chargers with a current rating of 0.5 A or more will still charge the Battery but will cause charge times to increase accordingly. Energy-saving Shutdown Mode If the Battery has not been used for several hours, it will go into shutdown mode to save energy. This means the Battery’s output will be disabled, and it will not supply power to the Brain. Pressing the Status Button will wake up the Battery. This means if the Battery has been inserted into the Brain and the Brain will not turn on, you must first press the Status Button on the Battery. This wakes up the Battery. Then press the power Button (Check Button) on the Brain to turn it on. Plugging the Battery into a charger will also automatically wake up the Battery. Technical Characteristics of the Battery Characteristic IQ Li-ion Battery Nominal capacity 2000 mAh Approximate charge time 2 hours Max continuous current* 8 A *Current is also temperature-limited, so max continuous current may be lower in very hot environments. Using the VEX IQ Robot Battery The VR Robot used in the GO Competition – Mars Math Expedition Playground in VEXcode VR is a virtual version of the Competition Advanced Hero Robot, used in the VEX GO Mars Math Expedition Competition. The virtual Hero Robot has the same dimensions, motors, and sensors as the physical robot. In VEXcode VR’s version of the Mars Math Expedition Competition, the Hero Robot is pre configured and all blocks needed to code the robot to complete tasks on the Field are automatically added to the Toolbox when the Playground is selected. Robot Controls The Virtual Hero Robot has the following controls: A drivetrain with a gyro. This enables the “Drivetrain” category of blocks in the Toolbox of VEXcode VR to drive and turn the robot. A moveable Arm controlled by the Arm Motor. This allows the robot to raise and lower game objects on the Field. The Arm moves in a continuous motion using the [Spin] block. The default position is for the arm to be lowered. The Arm can be moved to a specific position using the [Spin to position] block. The Arm motor can move from 0 degrees (lowest) to 420 degrees (highest). This can be useful when completing tasks like lifting samples onto the Lab. Robot Sensors A Gyro Sensor that is used with the Drivetrain. This allows the robot to make accurate and precise turns. The drivetrain heading reports a value from 0 to 359.9 degrees, and clockwise is positive. The Front Eye Sensor is located on the front of the Virtual Hero Robot, as shown in this image. When the Arm is lowered, the Front Eye Sensor is located between the forks. The Eye Sensor can report if an object is present, the color of an object, as well as its brightness and hue value. Understanding Robot Features in GO Competition – Mars Math Expedition Playground in VEXcode VR Categories The Community in VEX PD+ is a place where VEX educators can connect and share information and questions with other VEX educators around the world. Topics are sorted into broad categories based on VEX platforms and competitions—like VEXcode VR, which is outlined in red in this image. Topics Topics (also sometimes called threads) appear as a series of “boxes” within each category, and are conversations made up of related posts—for example, the topic “PD+ Summer 2022 Course” that is outlined in red in the image below. In this view, the box for each topic within a category includes an icon to represent the most recent poster, a title, optional tags (for the first post only), the first few lines of the first post’s content, the number of replies in the topic, and the date of its most recent post. Topics can be sorted, searched, and filtered using options at the top of the page and outlined in red in this image of the VR category. The first post in a conversation, called the original post (OP), begins a new topic. Posts in a topic are meant to continue a discussion about the OP or respond directly to other posts in the topic. Must like a face-to-face conversation, topics often divert into somewhat-related side conversations! Posts If you click on a topic to view the posts in the conversation, you’ll see that each post includes a user name, possible link to an earlier post, post date, and text and/or images that add to the topic’s conversation. Below each post, there are two icons and a “Reply” button that let you interact with that specific post in the topic. Clicking on the heart icon will demonstrate that you “like” that post. Clicking the link icon will generate a shareable link to the post that can be used by other PD+ Community members. Clicking the “Reply” button opens the ‘new post’ interface and allows you to add a post to the current topic that links back to the post you selected. How to Reply within an Existing Topic To add a post to an existing topic, simply click on the “Reply” button at the end of the conversation. If you want to reply directly to a specific post, use the “Reply” button immediately below that post to connect your reply to that post. A new window will appear at the bottom of the screen, which includes the name of the existing topic, basic formatting options, a space to enter text and images, and buttons to post or cancel your reply to the conversation. The left side of the window allows you to build and format your post, while the right side provides a formatted preview. When you’re done with your post, and the preview on the right side looks the way you want it to, click on the “Reply” button in the bottom left to add your post to the conversation. How to Start a New Topic If you’ve searched the PD+ Community for a topic and didn’t find what you were looking for, you can start a new conversation to talk about it! First, choose a category for your topic based on the information you want to share or the question you want to ask. Some categories are education-focused, and others apply to VEX competitions and teams. Then begin creating a new topic by clicking on “Create New Topic” in the menu bar, “New Topic” near the top of the category, or “start a new conversation” at the bottom of the list of existing topics. A new window will appear at the bottom of the screen, which looks a lot like the interface used to add a post in an existing topic, but which has some additional options. The left side of the window allows you to build and format your post, while the right side provides a formatted preview.After entering a descriptive title for your new topic, select or confirm a category using the pull-down menu and select optional tags for use in filtering. Add text and images to your post, and click on “Create Topic” to post it when you’re satisfied with the contents and formatting. How to View and Create Posts in the VEX PD+ Community Example projects provide students with an easy way to get started learning how to use different blocks to complete the tasks on the GO Competition - Mars Math Expedition Playground. What are some of the Mars Math Expedition Playground Example Projects? Example projects are provided for each aspect of game play, such as tilting the Solar Panel and clearing the Landing Site. Getting Started Using Mars Math Expedition Example Projects To open an example project, select the File menu. Select 'Open Examples. Select an Example Project. The Mars Math Expedition Playground Example projects feature the VR Competition Advanced Hero Robot in the icon. Once the Example Project loads, be sure to select the correct Stage on the Playground to ensure it runs properly. The note in the project will include the Stage. For more information about how to select the correct Stage in the playground, see this article. Using Mars Math Expedition Example Projects with Students Using example projects allows students to get started coding right away on the GO Competition - Mars Math Expedition Playground. Once an example project has been selected, the following steps will support your students as they learn to code the VR Hero Robot to complete tasks and earn points. Step 1: Open an example project, making sure to select the correct Stage. Run the Example Project for Students. Guide students to open the GO Competition – Mars Math Expedition Playground, select the correct Stage, and press the Start button to run the example project. Have students observe the behaviors of the VR Hero Robot, and talk about how they relate to the example project. Step 2: Modify the example project to make it your own. Encourage students to think about the particular aspect of game play demonstrated in the example project, and how they could change the code to complete tasks and earn points on the Playground. Students should choose one thing to change at a time, so they can see the direct effects of their changes. Remind students to run their projects frequently to see how each change affects the behavior of the robot. Students can continue modifying projects in this way many times, observing the results of the changes they are making and using this information in order to improve their ability to complete game tasks and earn points. For additional information on the use of any block or command, access the Help section by clicking on the question mark in the upper right corner of the workspace. Step 3: Experiment with another example project or try your own. After students have iterated on one example project several times, they may be ready to use what they have learned to create their own projects, or to remix another example project to continue to improve their coding. Using Example Projects with the GO Competition - Mars Math Expedition Playground The GO Competition – Mars Math Expedition Playground in VEXcode VR enables you to code a Virtual VEX GO Hero Robot to complete tasks from the VEX GO Mars Math Expedition Competition. The Playground Window in GO Competition – Mars Math Expedition has a few game-specific features on top of the current VR Playground Window Features. Selecting a Stage There are four Stages in the GO Competition – Mars Math Expedition. Each Stage adds tasks and the Field size grows. When the GO Competition – Mars Math Expedition Playground is selected, it will open the Stage 1 Field by default. To select a different Stage, first select the Expand button in the upper left corner of the Playground Window. Next, select the location icon that appears when the menu is open. Then, select your desired Stage from the ‘Select Stage’ options. To learn more about the tasks included in each Stage of the competition, see this article. Follow these steps to change your Stage selection at any time. Downloading a Playground Image You can download an image of the GO Competition – Mars Math Expedition Playground at any time. This can be useful to show the position of the robot and game objects at the end of a project. To download a Playground image, first select the Expand button in the top left corner of the Playground Window. Then, select the Download Playground button. The Download Playground button will download the entire Playground Window image as a .png image file. This includes: The current position of the VR Robot and game objects on the Field The timer at the moment of download The score All buttons on the Playground Window Here is an example of a downloaded Playground image at the end of a project to lift a game object. Using the Helicopter Button The Stages 3 and 4 Fields of the GO Competition – Mars Math Expedition Playground include a helicopter that can be placed on the Landing Site when debris is cleared. In the VEXcode VR Playground, this task is completed using the Helicopter button, in the lower right corner of the Playground Window. The Helicopter button is inactive until the debris is cleared from the Landing Site. When inactive, the button will appear to be grayed out, and you will not be able to select it. The Helicopter button will become active when the debris is cleared from the Landing Site. One example of ‘cleared debris’ is shown in the image to the right. Select the Helicopter button to move the Helicopter onto the Landing Site, in order to score the extra point. View this screen recording to see one example of how the Helicopter button can be used once the Landing Site is cleared. Using the Playground Features in the GO Competition – Mars Math Expedition The GO Competition - Mars Math Expedition Playground provides four stages of gameplay, beginning with Stage 1 and progressing through Stage 4. The stages are cumulative, with each new stage adding complexity by opening up additional tasks which can be completed in order to score points. For information about how to select a stage on this Playground, see this article. Each completed task in Mars Math Expedition is worth one point. This article will describe each stage of the Field, and the tasks associated with that stage. Stage 1 - Crater and Rover Tasks In Stage 1, one point can be earned for the following tasks: Remove a sample from a crater. Move the Rover out of the crater. Select the Pick Up a Sample Example Project in VEXcode VR to see how to remove a sample from a crater to earn one point. To learn more about using Example Projects in the Mars Math Expedition Playground, see this article. Stage 2 - Lab Scoring In Stage 2, one point can be earned for all Stage 1 tasks, in addition to the following tasks: Move a sample to the Lab Tile. Place a sample on top of the Lab. Place the sample onto its matching colored square. Select the Moving Samples Example Project in VEXcode VR to see a project that earns three points - one for removing the sample from the crater, one for moving the sample to the Lab Tile, and one for placing the sample on top of the Lab. Stage 3 - Solar Panel, Landing Site and Rocket Scoring In Stage 3, one point can be earned for all Stage 1 and 2 tasks, in addition to the following tasks: Tilt the Solar Panel down. Clear the debris from the Landing Site. Place the Helicopter on the Landing Site. Lift the Rocket Ship upright. End with the Robot touching the Red Tile. Select the Tilt the Solar Panel Example Project in VEXcode VR to view a project that demonstrates one way of tilting the Solar Panel down. Select the Clear the Landing Site Example project to view a project that shows how to clear the debris from the Landing Site. Stage 4 - Fuel Cell Scoring In Stage 4, one point can be earned for all Stage 1, 2, and 3 tasks, in addition to the following tasks: Remove a fuel cell from its cradle. Move a fuel cell to the Rocket Ship. Move a fuel cell to the Landing Site. Select the Scoring with Fuel Cells Example Project in VEXcode VR to view a project that demonstrates one way of removing a Fuel Cell from its cradle and moving it the Rocket Ship. In Stage 4, all of the tasks are available and players can strategize by coding the VR Hero Bot to complete the tasks that will earn them the most points in a one-minute match. Stages and Scoring on the GO Competition – Mars Math Expedition Playground The VEX Pin Tool makes it easy to disassemble pieces in the VEX IQ construction system. The Pin Tool has several features that can be used to make disassembling easy: the Puller, the Pusher, and the Lever. The Puller can be used by placing the tool over the unwanted pin, squeezing the handles, and pulling out the pin. Each handle is also designed to be used for disassembly. One side is constructed to push out pins. The other side incorporates the Lever, which can be used to pry two beams apart. View the Pin Tool in action to see how each of the features work. Using the VEX Pin Tool with VEX IQ Nut Retainers have many purposes, but one of their major functions is to provide the ability to tighten a nut without the use of a wrench. Although both perform similar functions, there are two sets of retainers in the VEX Ecosystem: one sized to fit #8-32 Nylock and Hex Nuts, the other sized to fit #8-32 Low Profile Nuts and all Standoffs. The purpose of this article is to explain the difference between Standoff Retainers and Hex Nut Retainers. Note: Standoff Retainers are used in the EXP Education Kit and Classroom Bundles. This image shows the difference in compatible size between Hex Nut Retainers and Standoff Retainers. Note that while only the 1-Post Retainer is shown, the same holds true for all Hex Nut Retainers and Standoff Retainers. For Hex Nut Retainers, the maximum width across flats (or the diameter measured from face to face) on a nut is 8.6000mm (the width of #8-32 Nylock and Hex Nuts), while the maximum width across flats for Standoff Retainers is 6.3500mm (the width of #8-32 Low Profile Nuts and all Standoffs). This means that #8-32 Nylock and Hex Nuts will only fit in Hex Nut Retainers, and that #8-32 Low Profile Nuts and Standoffs will only work effectively with Standoffs Retainers. While you can place #8-32 Low Profile Nuts and Standoffs into Hex Nut Retainers, they will not be self-tightened as they are too small to be held in place. Below is an easy-to-reference chart that explains which nut/standoff is compatible with each corresponding Nut Retainer. All nuts can be found here, all standoffs can be found here, all Hex Nut Retainers can be found here, and all Standoff Retainers can be found here. Understanding Standoff vs. Hex Nut Retainers Nut Retainers have many purposes, but one of their major functions is to provide the ability to tighten a nut without the use of a wrench. Although both perform similar functions, there are two sets of retainers in the VEX Ecosystem: one sized to fit #8-32 Nylock and Hex Nuts, the other sized to fit #8-32 Low Profile Nuts and all Standoffs. The purpose of this article is to explain the difference between Standoff Retainers and Hex Nut Retainers. This image shows the difference in compatible size between Hex Nut Retainers and Standoff Retainers. Note that while only the 1-Post Retainer is shown, the same holds true for all Hex Nut Retainers and Standoff Retainers. For Hex Nut Retainers, the maximum width across flats (or the diameter measured from face to face) on a nut is 8.6000mm (the width of #8-32 Nylock and Hex Nuts), while the maximum width across flats for Standoff Retainers is 6.3500mm (the width of #8-32 Low Profile Nuts and all Standoffs). This means that #8-32 Nylock and Hex Nuts will only fit in Hex Nut Retainers, and that #8-32 Low Profile Nuts and Standoffs will only work effectively with Standoffs Retainers. While you can place #8-32 Low Profile Nuts and Standoffs into Hex Nut Retainers, they will not be self-tightened as they are too small to be held in place. Below is an easy-to-reference chart that explains which nut/standoff is compatible with each corresponding Nut Retainer. All nuts can be found here, all standoffs can be found here, all Hex Nut Retainers can be found here, and all Standoff Retainers can be found here. Understanding Standoff vs. Hex Nut Retainers This table shows all of the VEX GO STEM Lab units and the main concepts covered in each one. Links are available to each Unit, from which the Unit Overview and individual Lab content can be viewed. All VEX GO STEM Labs follow the same Engage – Play – Share format. To learn more about what a STEM Labs is, see this article. To learn more about implementing a VEX GO STEM Lab Unit in your classroom, see this article. To see how these Units can be sequenced together, see the VEX GO Cumulative Pacing Guide. To see how these STEM Lab Units connect to VEX GO Activity Series and Activities in a suggested sequence, see the 1:1 Pacing Guide. STEM Lab Unit Unit Concepts Link to Intro to Building Introduction to building with VEX GO Kit pieces Design constraints Spatial language Link to Physical Science Force and motion Gathering and using data Link to Mars Rover – Surface Operations Coding Sequencing Project planning Link to Mars Rover – Landing Challenge Coding Sequencing Sensors Loops Link to Mars Rover – Exploring Mars Geology Coding Sensors Loops Conditionals My Blocks Link to Simple Machines What is a simple machine? Force and motion Link to Fractions Numerator/Denominator Equivalent fractions Link to Pendulum Game Building a pendulum Iterative problem solving Collaboration Link to Fun Frogs Life Science – Life Cycles Writing Link to Code Base Remote controlled driving Coding Sensors Link to Battle Boats Coordinate plane Link to Look Alike Traits Trait inheritance Link to Parade Float Engineering Design Process Coding Sequencing Link to Robot Jobs Coding Sequencing Project planning Link to Super Car Force and motion Speed Gathering and using data Link to Ocean Emergency Coding Robot behaviors Sequencing Link to Helping Hand Mechanisms Authentic problem solving Link to Magnet Car Magnetism Link to Pantograph Mechanics of a pantograph Scale Link to Robot Arm What is a robotic arm? Using a robotic arm Coding a robotic arm Link to Mars Math Expedition VEX GO Competitions Collaboration Link to Ocean Science Exploration VEX GO Competitions Collaboration Link to Village Engineering Construction VEX GO Competitions Collaboration Link to City Technology Rebuild VEX GO Competitions Collaboration VEX GO STEM Lab Unit Concepts This table shows all of the VEX123 STEM Lab units and the main concepts covered in each one. Links are available to each Unit, from which the Unit Overview and individual Lab content can be viewed. All VEX 123 STEM Labs follow the same Engage – Play – Share format. To learn more about what a STEM Labs is, see this article. To learn more about implementing a VEX 123 STEM Lab Unit in your classroom, see this article. To see how these Units can be sequenced together, see the VEX 123 Cumulative Pacing Guide. To see how these STEM Lab Units connect to VEX 123 Activity Series and Activities in a suggested sequence, see the 1:1 Pacing Guide. STEM Lab Unit Unit Concepts Link to Meet Your Robot What is a robot? Introduction to the 123 Robot Literacy Link to Number Line Numeracy Addition Link to Touch to Code Programming Language Robot Behaviors Sequencing Phonics Link to Moving from Touch to Coder Robot Behaviors Introduction to the VEX Coder Link to Find the Bug Debugging Using the Step button Sequencing Link to Role Play Robot Sequencing Social Emotional Learning (SEL) Link to Calm Down Robot Sequencing Social Emotional Learning (SEL) Link to Coding Fundamentals Robot Behaviors Sequencing Debugging Link to Little Red Robot Eye Sensor Literacy Mars Rover – Surface Operations Robot Behaviors Introduction to VEXcode 123 Mars Rover – Landing Challenge Eye Sensor Sequencing Loops VEX 123 STEM Lab Unit Concepts What Are Flex Wheels? Flex wheels are soft wheels that are designed to be compliant, and are useful for a variety of applications, such as: Picking up hard plastic game objects Picking up objects that have an irregular shape (e.g., cubes, discs, etc.) Driving over field obstacles where regular drive wheels may have difficulty Flex Wheels were originally designed for the VEXpro product line, which primarily uses 1/2" hex or 1-1/8" round bore for most applications. However, V5 uses 1/8" and 1/4" square shafts. In order to use Flex Wheels on a V5 robot, you will also need to use some specific adapters that allow Flex Wheels to be driven by V5 shafts. This guide will identify which parts are needed to make each size of Flex Wheel work on either the V5 ¼” High Strength Square Shaft or the ⅛” Square Shaft, both of which are standard in V5. Flex Wheel Sizes There are four different sizes of Flex Wheel that are legal for use on VRC robots. The two smaller sizes have a hex bore, while the two larger ones have a round bore. Diameter of Wheel Width of Wheel Bore 1.625” 0.500” ½” Hex (undersized) 2” 0.500” ½” Hex (undersized) 3” 1.000” 1.125” Round (undersized) 4” 1.000” 1.125” Round (undersized) Because the Flex Wheel material is flexible, the bores are intentionally undersized so that they do not slip on their intended shaft. Because of this, when you look at a Flex Wheel the bore will be significantly smaller than its matching adapter. Flex Wheel Durometers Each size of Flex Wheel is offered in three different durometers. Durometers identify the relative hardness of materials, and indicate the flexibility of the resulting Flex Wheel; the ‘A’ refers to the particular scale of measurement used for flexible mold rubbers. Higher-number durometers (e.g., 60A) are more rigid, while lower numbers (e.g., 30A) are very flexible. Choosing a Flex Wheel durometer based on your specific use case can be helpful for several reasons: Allows you to vary how much the wheel flexes when intaking an object. For example, a softer wheel may be better suited for picking up harder objects while a harder wheel may be better suited for picking up softer objects. If an intake is wide enough to intake multiple game objects at once, you can use different durometers to affect the grip on one side of the intake to help prevent objects from jamming. In a drive application, your choice of durometer flex wheels is like adjusting a suspension on a car. Softer wheels will dampen impacts better and can easily climb objects in their path, but might make the robot bouncy as it drives on flat ground. Harder wheels will have a “smoother” drive, but may have more trouble climbing over objects. Durometer Similar to a… 30A Soft Rubber Band 45A Pencil Eraser 60A Car Tire 1.625” And 2” Flex Wheel Assembly The two smallest Flex Wheels, 1.625” and 2”, require two accessory parts in order to be compatible with a V5 ¼” High Strength Square Shaft. An additional two inserts can be used to make these wheels compatible with a V5 ⅛” Square Shaft. See the diagrams below to help understand which parts are necessary to use the 1.625” and 2” Flex Wheels on your robot. 3” And 4” Flex Wheel Assembly The two larger sizes of Flex Wheels, 3” and 4”, require four accessory parts in order to be compatible with a V5 ¼” High Strength Square Shaft. An additional two inserts can be used to make these wheels compatible with a ⅛” Square Shaft. See the diagrams below to help understand which parts are necessary to use the 3” and 4” Flex Wheels on your robot. Optionally, VersaHubs can be retained to Flex Wheels using standard V5 hardware (note that this does not replace the use of the adapters described in this article, but can provide some additional stability if needed). Long screws can be used as through-bolts with nuts on the other side, or ¼” standoffs can be pressed into the bolt circles inside of the 3” and 4” Flex wheels to allow shorter screws to capture the Plastic VersaHubs on both sides of the wheel. Summary Table This table summarizes the parts needed to build a single Flex Wheel Assembly to use on a V5 Robot. Flex Wheel Size V5 Shaft Size VersaHex Adapter VersaHub High Strength Shaft Insert276-3881 1.625” or 2” ¼” High Strength 2x Required Not Required Not Required ⅛” Square 2x Required Not Required 2x Required 3” or 4” ¼” High Strength 2x Required 2x Required Not Required ⅛” Square 2x Required 2x Required 2x Required Part Substitutes There are a few parts that are functionally identical to those in the images above, which can be used interchangeably to make Flex Wheel Assemblies. The following parts can be substituted for each other, and all are legal for use on VRC robots. VersaHubs The following parts are functionally identical: 217-8079 - 1/2” Hex Bore Plastic VersaHub v2 217-2592 - 1/2” Hex Bore Aluminum VersaHub VersaHex Adaptors The following parts are functionally identical: 217-8004 - Plastic 1/2" VersaHex Adapters v2 (1/4" Square Bore) (48-pack) 217-7946 - 1/2" VersaHex Adapters v2 (1/4" Square Bore, 1/8" Long) (8 Pack) 217-7947 - 1/2" VersaHex Adapters v2 (1/4" Square Bore, 1/4" Long) (8 Pack) Cleaning Flex Wheels After prolonged use, teams may find they need to clean their Flex Wheels. VEX recommends using deionized water on a clean rag to wipe the surface of the wheels. Do not use Isopropyl Alcohol to clean Flex Wheels, as it may damage the compound used to manufacture the wheels. Alternative Flex Wheel Mounting Methods The methods of assembly shown above are the intended and best solutions for mounting Flex Wheels on V5 robots. However, we understand that they may not be feasible for all teams for a variety of reasons. If you have Flex Wheels, and are missing one or more of the adaptors shown above, there are still ways you can make Flex Wheels work on your VRC or non-competition robot. It is important to note that these alternatives may or may not perform as well as the methods shown above, and that some of these alternatives will perform better than others. The alternative methods all use parts that were not initially designed to work together, but work if you are in a pinch. Alternatives for 1.625” and 2” Flex Wheel The following alternatives for 1.625” and 2” Flex Wheels are listed in order of ease of assembly. Alternative 1: 276-3891 Clamping Shaft Collar (⅛” Shaft) or 276-6102 High Strength Clamping Shaft Collar The Clamping Shaft Collars can be pressed into the hex bore of the 1.625” and 2” Flex Wheels as a slight interference fit to make these wheels compatible with a ⅛” Shaft or ¼” Shaft. Assembly Steps: Step 1: Line up the shaft collar and the Flex Wheel. It may be easier to place the shaft collar on a solid surface while holding the Flex Wheel above. Step 2: Push the Flex Wheel over the shaft collar. It may be easiest to push the Flex Wheel down at an angle and then rock it over the shaft collar to get the shaft collar into the bore. Alternative 2: 276-2551 12T HS Gear (¼” HS Shaft) The 12T HS Gear is also a good interference fit into the hex bore on the 1.625” and 2” Flex Wheels. This option makes the Flex Wheels fit on a ¼” HS Shaft. Note: Because this part is metal, it may begin to tear the Flex Wheel over time. Use this method with caution so as to not destroy your wheels. Assembly Steps: Step 1: Line up the 12T pinion and the Flex Wheel. It may be easier to place the pinion on a solid surface while holding the Flex Wheel above. Step 2: Push the Flex Wheel over the 12T pinion. It may be easiest to push the Flex Wheel down at an angle and then rock it over the pinion to get the pinion in the bore. Alternative 3: Lockbars and Standoffs (⅛” Shaft) A hub for the 1.625” or 2” Flex Wheels can be created using either the Metal Lock Bar (275-1065) or the Plastic Lock Bar (276-2016-002) with 1” #8-32 screws, ½” #8-32 Standoffs, ½” Long Spacers, and your preferred #8-32 Nuts. Assembly Steps: Step 1: Thread two ½” standoffs onto 1” screws as shown below. Step 2: Slide the Flex Wheel over the standoffs as shown below. Step 3: Insert the 0.375” OD 0.5” long spacer into the hex bore of the wheel. Step 4: Attach the second lock bar and tighten nuts onto screws. Alternative 4: Hub from 276-1499 Intake Roller (⅛” shaft) The inner Plastic Hub from a 276-1499 Intake Roller can be used inside of Flex Wheels as well. Simply cut the rubber overmold away from the part, and insert the plastic hub into the 1.625” or 2” Flex Wheel similarly to the steps in Alternatives 1 &amp; 2. Assembly Steps: Step 1: Slice on the line shown on the Intake Roller and remove the inner plastic hub from the overmold. Step 2: Line up the plastic hub and the Flex Wheel. It may be easier to place the plastic hub on a solid surface while holding the Flex Wheel above. Step 3: Push the Flex Wheel over the plastic hub. It may be easiest to push the Flex Wheel down at an angle and then rock it over the hub to get the hub into the bore. Alternatives for 3” and 4” Flex Wheels The following alternatives for 3” and 4” Flex Wheels are listed in order of ease of assembly. Alternative 1: 2 16T Sprockets, 6P (276-8328) (¼” HS Shaft) Two 16T 6P Sprockets can be inserted into the bore of the Flex Wheel. A 0.25” long (0.375” OD) nylon spacer can be used to improve functionality by keeping the sprockets evenly spaced inside of the wheel. Step 1: Fully insert the first sprocket by squishing the Flex Wheel into an oval shape Step 2: Rotate the sprocket in the bore of the Flex Wheel. Insert a shaft (not pictured) and a high strength shaft adapter if needed. Step 3: Put the 0.25” long (0.375” OD) nylon spacer and the second sprocket, along with a high strength shaft adapter if needed, onto the shaft. Step 4: Push the sprocket assembly into the Flex Wheel. As the second sprocket goes into the Flex Wheel bore it may be easiest to work your way around the sprocket teeth progressively in a circle, pushing them into the bore in sections by applying pressure to the sprocket. Alternative 2: 60T High Strength Gear (¼” HS Shaft) A 60t gear has a bolt pattern that is close to the bolt pattern on the Flex Wheel. The patterns don’t line up perfectly to the eye, but the softer Flex Wheels are flexible enough that they can stretch to make the hole pattern line up. Step 1: Align two holes of the gear and the Flex Wheel Step 2: Insert two 1.75” bolts into holes of the gear and Flex Wheel. Step 3: Screw on nuts Alternative 3: Custom Polycarbonate Plates and Lock Bars (⅛” Shaft) All VRC teams have an allowance of 0.065” polycarbonate, which can be used to make a plate that mounts to the side of a Flex Wheel and holds a lock bar. Step 1: Cut custom polycarbonate plates. The important features are holes on a 1.875” bolt circle to mount to the Flex Wheel, 2 holes to mount the lock bar insert and a clearance hole in the center of the plate for the shaft. Step 2: Attach the plates Step 3: Attach the lock bars Step 4: Screw on nuts Flex Wheels for V5 In Workcell STEM Lab 13: Capstone Project, students will design a Workcell that will sort all 36 randomly dispensed disks into the matching colored End Zones as quickly as possible. Sorting disks correctly will award points. Scoring disks incorrectly or inefficiently will result in a loss of points. Bonus points will be awarded depending on how disks are stacked in the End Zones, as well as how quickly. The winner of the Capstone Project is determined by who has the most points at the end of all runs. Organizing your classroom for this competition will help ensure success for you and your students. Students should be in groups and paired with their associated Workcell. Groups should remain with their assigned Workcell throughout the entirety of Lab 13, as groups will design and modify their Workcell in ways specific and unique to their group. STEM Lab 13 is designed to be completed over a period of multiple weeks. The recommended time is 4 weeks, however, this could vary depending on your classroom and students. The Rethink section of STEM Lab 13 encompasses the Capstone Project competition. Before Starting the Competition Before class, have the following items prepared: At least five copies per group of the printed score sheet on the last page of the rules document The V5 Workcell Leaderboard Match schedule Matches can move more smoothly if you and your students know when each group is expected to be ready to compete. Each run should take no longer than 10 minutes, but you will need to allow time for setup and scoring at the end. Creating a schedule that allows for roughly 15 minutes per match should account for setup and scoring. You will want to assign each group at least two runs during the competition so that students can iterate on their strategy and build between matches. Establishing a time table will help you plan your class time to allow for a successful competition. Having a predetermined schedule will also enable you to announce the matches throughout class, so that your focus can remain on scoring and timing. Post your schedule with assigned times for each group, or print it and give it out to students so that they can clearly see when they are expected to be ready. This timetable will then set the parameters for students’ practice time. An example match schedule is shown below. During the Competition Use the following guide to facilitate the competition in your classroom. It is recommended that the Play section of STEM Lab 13 takes approximately one week to complete, and the Rethink section takes approximately three weeks. Again, this can change depending on the needs of your classroom and students. The following recommendations are made based on a time frame of four weeks, and can be adjusted to suit your situation. The optional Collaboration and Programming Rubrics allow you to provide students with feedback and assess their projects throughout STEM Lab 13 and the competition. Four Weeks Before the Competition (Week One) In the Play section, students will be introduced to different concepts that will prepare them to design their own Workcell for the Capstone Project Competition. Bring students together for whole class instruction and introduce the Lab to the students. Students will learn about Workcell design by analyzing why the build in Lab 11 is laid out in a specific way. By going through and understanding the design of the Lab, they will learn about concepts such as the Workcell arm’s mechanical limits, how and why conveyors are placed in certain locations, and the importance of pick up and drop off locations. Throughout the Play section, students will also explore how moving the location of the arm affects its X, Y, and Z-coordinates, how to mechanically move the location of the arm on the Workcell, and the option to create custom V5 Smart Cables. Tell students that these concepts can be applied when they design their own Workcell in the Rethink section. Explain to students that there is no prescribed build for this Lab. There is an example Lab 13 build pictured in this Lab, but there are no associated build instructions. Students can design and build any type of Workcell that they want for this Lab, as long as it adheres to the rules for the competition. Follow the facilitation prompts at the beginning of each of the Play pages to facilitate the Play section. Three Weeks Before the Competition (Week Two) As a whole class, introduce the competition to the students. Reiterate that there is not a prescribed build for this competition. Students can use examples found throughout Lab 13, the previous 12 Labs, and the Workcell Extensions. However, students are free to design any layout they see fit to be successful in the competition. Students can use the information from the Play section when designing their Workcell. Break students into their groups if they haven’t already done so. Ensure they have their assigned Workcell, their device with VEXcode V5, and their engineering notebooks. Recommended group size is between 2-4 students per Workcell. Instruct groups to first watch the two videos on this page and then read the rules document before brainstorming on a design. Hand out multiple printed score sheets to the students. Two of these will be used for their actual scored runs; any additional sheets can be used to score while practicing. As students are watching the videos and reading the rules, circle the room and answer any questions that arise. When students have finished watching the video and reading the rules document, ensure they understand the rules by asking groups the following formative assessment questions before moving on: Workcell Lab 13: Capstone Project – Check Your Understanding Questions Workcell Lab 13: Capstone Project – Check Your Understanding Answer Key Once it is clear that all groups are on the same page with the rules, tell them to begin working on their design. As groups are working, circle the room and ask students the following questions: How are you approaching the challenge? What is your strategy? How are you thinking of designing their Workcell to compete? For groups that are struggling, encourage them to look back at the Play section for specific steps on how to find the x, y, and z-coordinates once the arm has been moved, how to understand the arm's mechanical limits, or how to make custom V5 cables. If groups are still unsure where to start, encourage them to look through the Workcell Extensions for ideas and inspiration, as well as step-by-step help on how to build certain mechanisms. More information on these mechanisms can be found in this article. Two Weeks Before the Competition (Week Three) After groups have designed their first iteration, encourage students to test their designs, record the outcome, make adjustments, and then try again. Please note that it may take students multiple weeks to get a Workcell in a condition to be able to compete. Students should be iterating on both the physical design of the Workcell as well as the code. Once groups have designed and tested their Workcells enough times to get a working version, it will be time to compete. The Day Before the Competition Tell students that on competition day they will be allowed two full runs. The highest score of those two runs will be taken as their final score. You, the teacher, will go through the room and record each group’s first score, and then start back with the first group to obtain their second score. This will give each group time between their runs to fix any hardware or coding problems that arise during their first run. Note that groups will not physically compete against each other. Each group will compete while you, the teacher, watch the run to record the time as well as the score. Whenever a group is not actively being scored, they should plan to be practicing and iterating. It is recommended that you follow a posted match schedule so that students have an expectation of when they will be competing. Give students this schedule now so they can prepare properly for the competition the next day. Competition Day To keep track of the score and time for each group, use the V5 Workcell Leaderboard. This allows students to see their score in real time. Information on how to facilitate the Capstone Project Competition using this leaderboard can be found in this article. After the Competition After all groups have competed, bring students back together for a whole-class discussion. Ask students some of these questions to wrap up the challenge. How did you interpret the rules in order to make design decisions? What was your strategy to obtain the highest score? What did your group find difficult about this challenge? Did your project work the first time you tried it? If not, what changes did you make to improve it? How did your group work together to solve the challenge? You can also print each group’s scores, or even the whole class’s rankings, from the leaderboard. Facilitating the Workcell Capstone Project Competition
